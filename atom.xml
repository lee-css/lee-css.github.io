<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>当下</title>
    <updated>2021-09-16T00:43:31.140Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2021, 当下</rights>
    <entry>
        <title type="html"><![CDATA[css-圣杯布局]]></title>
        <id>http://localhost:4000/post/css-sheng-bei-bu-ju/</id>
        <link href="http://localhost:4000/post/css-sheng-bei-bu-ju/">
        </link>
        <updated>2021-09-15T14:39:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="要求">要求</h2>
<p>左右宽度固定，中间宽度自适应</p>
<h2 id="实现">实现</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
    &lt;title&gt;圣杯布局&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        body {
            min-width: 550px;
        }
        #header {
            text-align: center;
            background-color: #f1f1f1;
        }

        #container {
            padding-left: 200px;
            padding-right: 150px;
        }
        #container .column {
            float: left;
        }

        #center {
            background-color: #ccc;
            width: 100%;
        }
        #left {
            position: relative;
            background-color: yellow;
            width: 200px;
            margin-left: -100%;
            right: 200px;
        }
        #right {
            background-color: red;
            width: 150px;
            margin-right: -150px;
        }

        #footer {
            text-align: center;
            background-color: #f1f1f1;
        }

        /* 手写 clearfix */
        .clearfix:after {
            content: '';
            display: table;
            clear: both;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;header&quot;&gt;this is header&lt;/div&gt;
    &lt;div id=&quot;container&quot; class=&quot;clearfix&quot;&gt;
        &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;this is center&lt;/div&gt;
        &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;this is left&lt;/div&gt;
        &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;this is right&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;footer&quot;&gt;this is footer&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="效果">效果</h2>
<figure data-type="image" tabindex="1"><img src="http://localhost:4000/post-images/1631716817057.png" alt="" loading="lazy"></figure>
<h2 id="讲解">讲解</h2>
<p><code>margin-left: -100%;</code></p>
<p>1、100%是相对于父元素的宽度</p>
<p>2、要理解它，可以先把父元素的padding值去掉。</p>
<p>3、可以看到，left区域占据最左端，左边和父元素的左边重合。</p>
<p>即从区域范围外，向左移动父元素的100%</p>
<p>4、此时，再加上父元素的padding值。</p>
<p>同理，left区域占据可视范围内的最左边。</p>
<p>5、移动相对位置</p>
<p>第三步图示：</p>
<figure data-type="image" tabindex="2"><img src="http://localhost:4000/post-images/1631716828211.png" alt="" loading="lazy"></figure>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://juejin.cn/post/6844903962529759239#heading-20">CSS如何进行圣杯布局</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css-BFC]]></title>
        <id>http://localhost:4000/post/css-bfc/</id>
        <link href="http://localhost:4000/post/css-bfc/">
        </link>
        <updated>2021-09-14T14:56:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><strong>块格式化上下文（Block Formatting Context，BFC）</strong> 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p>
<h2 id="形成-bfc-的常见条件">形成 BFC 的常见条件</h2>
<ul>
<li>float 不是 none</li>
<li>position 是 absolute 或 fixed</li>
<li>overflow 不是 visible</li>
<li>display 是 flex inline-block等</li>
</ul>
<h2 id="作用">作用</h2>
<h3 id="清除浮动">清除浮动</h3>
<p>为父盒子设置 overflow: hidden;<br>
overflow: hidden;使父元素产生了一个BFC，BFC的高度计算包括其内部浮动的元素，从而达到清除浮动的效果</p>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css-margin]]></title>
        <id>http://localhost:4000/post/css-margin/</id>
        <link href="http://localhost:4000/post/css-margin/">
        </link>
        <updated>2021-09-14T14:42:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>margin</code> 属性为给定元素设置所有四个（上下左右）方向的外边距属性。</p>
<p>外边距控制的是元素外部空出的空间。相反，padding操作元素<em>内部</em>空出的空间。</p>
<h2 id="重叠">重叠</h2>
<p>上下元素的下上外边距有时会重叠，实际空出的空间长度变为两外边距中的较长值。</p>
<h2 id="负值">负值</h2>
<ul>
<li>margin-top 和 margin-left 负值，元素向上、向左移动</li>
<li>margin-right 负值，右侧元素左移，自身不受影响</li>
<li>margin-bottom 负值，下方元素上移，自身不受影响</li>
</ul>
<h2 id="水平居中">水平居中</h2>
<p>在现代浏览器中实现水平居中，可以使用 <code>display: flex; justify-content: center;</code>。</p>
<p>不过，在 IE8-9 这样的不支持弹性盒布局的旧式浏览器中，上述代码并不会生效。此时要实现在父元素中居中，可使用 <code>margin: 0 auto;</code>。</p>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin">https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript-webApi-window方法requestAnimationFrame]]></title>
        <id>http://localhost:4000/post/javascript-webapi-window-fang-fa-requestanimationframe/</id>
        <link href="http://localhost:4000/post/javascript-webapi-window-fang-fa-requestanimationframe/">
        </link>
        <updated>2021-09-14T00:16:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>window.requestAnimationFrame()</code>告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p>
<h2 id="示例">示例</h2>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
        &lt;title&gt;JS 真题演示&lt;/title&gt;

        &lt;style&gt;
            #div1 {
                width: 100px;
                height: 50px;
                background-color: red;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;JS 真题演示&lt;/p&gt;

        &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;

        &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.0/jquery.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;./RAF.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code class="language-js">// 3s 把宽度从 100px 变为 640px ，即增加 540px
// 60帧/s ，3s 180 帧 ，每次变化 3px

const $div1 = $('#div1')
let curWidth = 100
const maxWidth = 640

// // setTimeout
// function animate() {
//     curWidth = curWidth + 3
//     $div1.css('width', curWidth)
//     if (curWidth &lt; maxWidth) {
//         setTimeout(animate, 16.7) // 自己控制时间
//     }
// }
// animate()

// RAF
function animate() {
    curWidth = curWidth + 3
    $div1.css('width', curWidth)
    if (curWidth &lt; maxWidth) {
        window.requestAnimationFrame(animate) // 时间不用自己控制
    }
}
animate()
</code></pre>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript-数组去重]]></title>
        <id>http://localhost:4000/post/javascript-shu-zu-qu-chong/</id>
        <link href="http://localhost:4000/post/javascript-shu-zu-qu-chong/">
        </link>
        <updated>2021-09-13T23:59:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="示例">示例</h2>
<pre><code class="language-js">// 传统方式
function unique(arr) {
    const res = []
    arr.forEach(item =&gt; {
        if (res.indexOf(item) &lt; 0) {
            res.push(item)
        }
    })
    return res
}

// 使用 Set （无序，不能重复）
function unique(arr) {
    const set = new Set(arr)
    return [...set]
}

const res = unique([30, 10, 20, 30, 40, 10])
console.log(res)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript-实例-解析url参数]]></title>
        <id>http://localhost:4000/post/javascript-shi-li-jie-xi-url-can-shu/</id>
        <link href="http://localhost:4000/post/javascript-shi-li-jie-xi-url-can-shu/">
        </link>
        <updated>2021-09-13T14:15:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>不想看正则，以后复习再看</p>
<h2 id="获取参数值">获取参数值</h2>
<pre><code class="language-js">// 传统方式
function query(name) {
    const search = location.search.substr(1) // 类似 array.slice(1)
    // search: 'a=10&amp;b=20&amp;c=30'
    const reg = new RegExp(`(^|&amp;)${name}=([^&amp;]*)(&amp;|$)`, 'i')
    const res = search.match(reg)
    if (res === null) {
        return null
    }
    return res[2]
}
query('d')

// URLSearchParams
function query(name) {
    const search = location.search
    const p = new URLSearchParams(search)
    return p.get(name)
}
console.log( query('b') )

</code></pre>
<h2 id="url参数解析为js对象">url参数解析为js对象</h2>
<pre><code class="language-js">// url参数解析为js对象

// 传统方式，分析search
function queryToObj() {
  const res = {}
  const search = location.search.substr(1) // 去掉前面的`?`
  search.split('&amp;').forEach(paramStr =&gt; {
    const arr = paramStr.split('=')
    const key = arr[0]
    const val = arr[1]
    res[key] = val
  })
  return res
}

// 使用URLSearchParams
function queryToObj() {
  const res = {}
  const pList = new URLSearchParams(location.search)
  pList.forEach((val, key) =&gt; {
    res[key] = val
  })
  return res
}

</code></pre>
<h2 id="mdn">MDN</h2>
<p><code>URLSearchParams</code> 接口定义了一些实用的方法来处理 URL 的查询字符串。</p>
<pre><code class="language-js">var paramsString = &quot;q=URLUtils.searchParams&amp;topic=api&quot;
var searchParams = new URLSearchParams(paramsString);

for (let p of searchParams) {
  console.log(p);
}

// ['q', 'URLUtils.searchParams']
// ['topic', 'api']

</code></pre>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ js手写-max]]></title>
        <id>http://localhost:4000/post/js-shou-xie-max/</id>
        <link href="http://localhost:4000/post/js-shou-xie-max/">
        </link>
        <updated>2021-09-13T13:53:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>获取多个数字中的最大值</p>
<h2 id="示例">示例</h2>
<pre><code class="language-js">function max() {
  const nums = Array.prototype.slice.call(arguments) // 变为数组
  let max = 0
  nums.forEach(n =&gt; {
    if (n &gt; max) {
      max = n
    }
  })
  return max
}
</code></pre>
<h2 id="感受">感受</h2>
<p>换一种写法</p>
<pre><code class="language-js">function max(...array) {
  const length = array == null ? 0 : array.length
  return length
    ? array.reduce((acc,cur) =&gt; {
      return acc &gt; cur ? acc : cur
    })
    : void 0
}
max(1,2,3)
</code></pre>
<h2 id="当然没必要">当然没必要</h2>
<p>直接用Math.max()就好</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ js手写-trim]]></title>
        <id>http://localhost:4000/post/js-shou-xie-trim/</id>
        <link href="http://localhost:4000/post/js-shou-xie-trim/">
        </link>
        <updated>2021-09-13T13:37:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>原型，this,正则</p>
<h2 id="示例">示例</h2>
<pre><code class="language-js">String.prototype.trim = function() {
  return this.replace(/^\s+/,'').replace(/\s+$/,'')
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ js手写-isEqual]]></title>
        <id>http://localhost:4000/post/js-shou-xie-isequal/</id>
        <link href="http://localhost:4000/post/js-shou-xie-isequal/">
        </link>
        <updated>2021-09-12T23:50:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>比较两个对象或数组是否属性值全部一致</p>
<h2 id="示例">示例</h2>
<pre><code class="language-js">// 判断是否是对象或数组
function isObject(obj) {
    return typeof obj === 'object' &amp;&amp; obj !== null
}
// 全相等（深度）
function isEqual(obj1, obj2) {
    if (!isObject(obj1) || !isObject(obj2)) {
        // 值类型（注意，参与 equal 的一般不会是函数）
        return obj1 === obj2
    }
    if (obj1 === obj2) {
        return true
    }
    // 两个都是对象或数组，而且不相等
    // 1. 先取出 obj1 和 obj2 的 keys ，比较个数
    const obj1Keys = Object.keys(obj1)
    const obj2Keys = Object.keys(obj2)
    if (obj1Keys.length !== obj2Keys.length) {
        return false
    }
    // 2. 以 obj1 为基准，和 obj2 一次递归比较
    for (let key in obj1) {
        // 比较当前 key 的 val —— 递归！！！
        const res = isEqual(obj1[key], obj2[key])
        if (!res) {
            return false
        }
    }
    // 3. 全相等
    return true
}

// 测试
const obj1 = {
    a: 100,
    b: {
        x: 100,
        y: 200
    }
}
const obj2 = {
    a: 100,
    b: {
        x: 100,
        y: 200
    }
}
// console.log( obj1 === obj2 )
console.log( isEqual(obj1, obj2) )

const arr1 = [1, 2, 3]
const arr2 = [1, 2, 3, 4]

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js手写-throttle]]></title>
        <id>http://localhost:4000/post/js-shou-xie-throttle/</id>
        <link href="http://localhost:4000/post/js-shou-xie-throttle/">
        </link>
        <updated>2021-09-12T23:07:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>当拖拽事件执行时，频率太快，减少事件的执行次数，以一个固定频率来执行。</p>
<h2 id="示例">示例</h2>
<pre><code class="language-js">const div1 = document.getElementById('div1')

let timer = null
div1.addEventListener('drag', function (e) {
    if (timer) {
        return
    }
    timer = setTimeout(() =&gt; {
        console.log(e.offsetX, e.offsetY)

        timer = null
    }, 100)
})
</code></pre>
<pre><code class="language-js">const div1 = document.getElementById('div1')

// 节流
function throttle(fn, delay = 100) {
    let timer = null

    return function () {
        if (timer) {
            return
        }
        timer = setTimeout(() =&gt; {
            fn.apply(this, arguments)
            timer = null
        }, delay)
    }
}

div1.addEventListener('drag', throttle(function (e) {
    console.log(e.offsetX, e.offsetY)
}))
</code></pre>
<h3 id="apply">apply</h3>
<pre><code class="language-js">div1.addEventListener('drag', function(event) {

})
</code></pre>
<p><code>fn.apply(this, arguments)</code>:由上述代码可知，arguments参数是传递到throttle返回的函数中的，所以需要将参数传递给fn</p>
]]></content>
    </entry>
</feed>