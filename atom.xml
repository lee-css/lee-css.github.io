<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leecss.com</id>
    <title>当下</title>
    <updated>2021-06-29T15:32:18.992Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leecss.com"/>
    <link rel="self" href="https://leecss.com/atom.xml"/>
    <logo>https://leecss.com/images/avatar.png</logo>
    <icon>https://leecss.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 当下</rights>
    <entry>
        <title type="html"><![CDATA[git-restore]]></title>
        <id>https://leecss.com/post/git-restore/</id>
        <link href="https://leecss.com/post/git-restore/">
        </link>
        <updated>2021-06-29T15:24:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>因为git checkout 命令职责较多、不够明确，所以git 2.23 版本新增了switch、restore命令</p>
<p>switch命令专门用来切换分支、创建并切换分支等</p>
<p>restore命令专门用来恢复(撤销)暂存区和工作区的文件</p>
<h2 id="命令">命令</h2>
<p>为了方便初步理解，先使用撤销</p>
<h3 id="撤销工作区文件的修改">撤销工作区文件的修改</h3>
<p>撤销工作区指定文件的修改 ，即从暂存区覆盖到工作区</p>
<p>--worktree为默认参数，可以省略</p>
<pre><code>git restore [--worktree] [file]
</code></pre>
<p>恢复工作区所有文件</p>
<pre><code class="language-sh">git restore .
</code></pre>
<h3 id="撤销暂存区文件的修改">撤销暂存区文件的修改</h3>
<p>撤销暂存区指定文件的修改，即从仓库覆盖到暂存区。但是被撤销的文件不会更改，会恢复到工作区。</p>
<pre><code class="language-sh">git restore --staged [file]
</code></pre>
<h3 id="撤销工作区和暂存区文件的修改">撤销工作区和暂存区文件的修改</h3>
<p>撤销工作区和暂存区文件的修改，即从仓库到暂存区和工作区</p>
<pre><code class="language-sh">git restore --staged --worktree [file]
</code></pre>
<h3 id="切换工作区内容">切换工作区内容</h3>
<p>将工作区内容切换到某个快照</p>
<pre><code class="language-sh">git restore --source [commitID]
// 工作区切换到上次提交
git restore --source HEAD~
</code></pre>
<h2 id="参数详解">参数详解</h2>
<p>进一步理解，使用恢复</p>
<p>恢复一个文件，从哪里到哪里</p>
<p>--source 来源地，即从哪里</p>
<p>--staged 目的地，即到哪里(暂存区)</p>
<p>--worktree 目的地，即到哪里(工作区)</p>
<p>举例说明：假如把readme.md从上次提交同时恢复到暂存区和工作区</p>
<pre><code class="language-sh">git restore --source HEAD~ --staged --worktree readme.md
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1624980286919.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-switch]]></title>
        <id>https://leecss.com/post/git-switch/</id>
        <link href="https://leecss.com/post/git-switch/">
        </link>
        <updated>2021-06-28T14:43:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>因为git checkout 命令职责较多、不够明确，所以git 2.23 版本新增了switch、restore命令</p>
<p>switch命令专门用来切换分支、创建并切换分支等</p>
<h2 id="命令">命令</h2>
<h3 id="新建分支">新建分支</h3>
<p>新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name]
git switch -c new
</code></pre>
<p>从某个快照新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name] [commitID]
git switch -c new c2
</code></pre>
<p>从某个标签新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name] [tag-name]
git switch -c new v2.0
</code></pre>
<h3 id="切换分支">切换分支</h3>
<p>切换上次所在的分支</p>
<pre><code class="language-sh">git switch -
</code></pre>
<p>切换到<code>dev</code>分支</p>
<pre><code class="language-sh">git switch dev
</code></pre>
<h2 id="与checkout的对比">与checkout的对比</h2>
<h3 id="checkout">checkout</h3>
<p>checkout在分支方面的做用有两点：新建分支并切换到新建分支，切换分支</p>
<pre><code class="language-sh">git checkout -b new
git checkout dev
</code></pre>
<h3 id="switch">switch</h3>
<p>switch中相同作用的命令</p>
<pre><code class="language-sh">git switch -c new
git switch dev
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-checkout]]></title>
        <id>https://leecss.com/post/git-checkout/</id>
        <link href="https://leecss.com/post/git-checkout/">
        </link>
        <updated>2021-06-28T13:45:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git checkout</code>命令有多种用途。大致分为新建分支；切换分支、快照、标签；撤销文件。</p>
<h2 id="分类">分类</h2>
<h3 id="新建分支">新建分支</h3>
<p><code>-b</code>用于生成一个新的分支。</p>
<pre><code class="language-sh">git checkout -b new
</code></pre>
<h3 id="切换分支">切换分支</h3>
<p>回到先前所在的分支</p>
<pre><code class="language-sh">git checkout
</code></pre>
<p>切换到<code>dev</code>分支</p>
<pre><code class="language-sh">git checkout dev
</code></pre>
<h2 id="切换到指定快照commit">切换到指定快照（commit）</h2>
<pre><code class="language-sh">git checkout &lt;commitID&gt;
</code></pre>
<h2 id="切换到某个tag">切换到某个tag</h2>
<pre><code class="language-sh">git checkout tags/1.1.4
</code></pre>
<p>当本地没有叫做1.1.4的分支时，可以省略<code>tags/</code>,直接使用标签名</p>
<pre><code>git checkout 1.1.4
</code></pre>
<h3 id="撤销文件修改">撤销文件修改</h3>
<h4 id="工作区">工作区</h4>
<p>将指定文件从暂存区复制到工作区，用来丢弃工作区对该文件的修改</p>
<pre><code class="language-sh">git checkout -- &lt;filename&gt;
</code></pre>
<h4 id="暂存区和工作区">暂存区和工作区</h4>
<p>指定从某个 commit 恢复指定文件，同时改变暂存区和工作区</p>
<pre><code class="language-sh">git checkout HEAD~ -- &lt;filename&gt;
</code></pre>
<p><code>-p</code>参数表示进入交互模式，只恢复部分变化。</p>
<pre><code class="language-sh">git checkout -p
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[祝宝贝生日快乐]]></title>
        <id>https://leecss.com/post/zhu-bao-bei-sheng-ri-kuai-le/</id>
        <link href="https://leecss.com/post/zhu-bao-bei-sheng-ri-kuai-le/">
        </link>
        <updated>2021-06-27T16:05:20.000Z</updated>
        <content type="html"><![CDATA[<p>happy birthday~<br>
😛😛😛</p>
<p>一岁一礼 一寸欢喜<br>
<img src="https://leecss.com/post-images/1624805818323.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-原理]]></title>
        <id>https://leecss.com/post/git-yuan-li/</id>
        <link href="https://leecss.com/post/git-yuan-li/">
        </link>
        <updated>2021-06-27T05:58:41.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="git是如何存储信息的">git是如何存储信息的</h2>
<p>1、初始化仓库，新建文件，并添加到暂存区</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="git是如何存储信息的">git是如何存储信息的</h2>
<p>1、初始化仓库，新建文件，并添加到暂存区</p>
<!-- more -->
<pre><code class="language-sh">git init
echo '111' &gt; a.txt
echo '222' &gt; b.txt
git add *.txt
</code></pre>
<pre><code class="language-sh">// 查看一下当前的git仓库中的内容
tree .git

├─hooks    
├─info     
├─objects  
│  ├─4e    
│  ├─71    
│  ├─info  
│  └─pack  
└─refs     
    ├─heads
    └─tags 
    
ls -a .git/objects/4e
./  ../  f5d11d3b99f88fb9f70b694de01db16c56ed50

ls -a .git/objects/71
./  ../  70f7d93c37a8861f0e6816780b2881ad5f58d2

// 查看一下f5d11d3b99f88fb9f70b694de01db16c56ed50文件中的内容
cat .git/objects/4e/f5d11d3b99f88fb9f70b694de01db16c56ed50
x☺K□□OR0gP744TW□☻∟.♥☻
// 打印出来的是一些乱码，原因是因为git对储存的内容做了二进制压缩
</code></pre>
<p>2、cat-file</p>
<pre><code class="language-sh">git cat-file [-t] [-p]
</code></pre>
<p>-t 打印文件类型</p>
<p>-p 打印文件具体内容</p>
<pre><code class="language-sh">git cat-file -t 4ef5d1
blob
git cat-file -p 4ef5d1
'111'
</code></pre>
<p>3、git object</p>
<p>git 储存信息的最小单元，对象数据库包含四类对象。git对象创建完成后均不可变更。</p>
<ul>
<li>Blob：包含二进制数据，它们是文件内容。只要文件内容改变，就会在对象数据库中生成一个blob对象。注意，blob对象只保存文件内容，不含文件名和文件存储位置等信息。如果文件名改变，或者文件储存位置改变，不会生成新的blob对象。</li>
<li>Tree：blob对象的集合，以及它们的文件名和权限。一个tree对象描述一个时点上的一个目录。</li>
<li>Commit：描述一个时点上的项目状态，包含一条log信息，一个tree对象和指向父节点（parent commits）的指针。第一个commit对象没有父节点。
<ul>
<li>记录 root tree SHA1</li>
<li>记录 parent commit SHA1</li>
<li>记录作者、时间和 commit message</li>
</ul>
</li>
<li>tag</li>
</ul>
<p>4、sha1哈希算法</p>
<pre><code class="language-sh">111 -&gt; 4ef5d11d3b99f88fb9f70b694de01db16c56ed50
</code></pre>
<p>每个git对象都有一个哈希值，哈希值可以理解为我们的身份证号</p>
<p><code>4ef5d11d3b99f88fb9f70b694de01db16c56ed50</code>就是内容为111类型为blob的git对象的身份证号，我们可以通过4ef5d11d3b99f88fb9f70b694de01db16c56ed50找到这个git对象</p>
<p>5、git commit</p>
<pre><code class="language-sh">git commit -m 'init'
</code></pre>
<pre><code class="language-sh">tree .git

├─hooks
├─info
├─logs
│  └─refs
│      └─heads
├─objects
│  ├─39
│  ├─4e
│  ├─5f
│  ├─71
│  ├─info
│  └─pack
└─refs
    ├─heads
    └─tags
    
 ls -a .git/objects/39
./  ../  bd985025d281e7c1d1c9493c90156fb9e26ea0

ls -a .git/objects/5f
./  ../  3f16e16db5faec1bf71fab36cbad24fbddfd39
</code></pre>
<pre><code class="language-sh">git cat-file -t 5f3f16
tree

git cat-file -p 5f3f16
100644 blob 4ef5d11d3b99f88fb9f70b694de01db16c56ed50    a.txt
100644 blob 7170f7d93c37a8861f0e6816780b2881ad5f58d2    b.txt
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1624773693534.png" alt="" loading="lazy"></figure>
<pre><code class="language-sh">git cat-file -t 39bd98
commit

git cat-file -p 39bd98
tree 5f3f16e16db5faec1bf71fab36cbad24fbddfd39
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://leecss.com/post-images/1624773720929.png" alt="" loading="lazy"></figure>
<p>6、HEAD指针和分支</p>
<pre><code class="language-sh">cat .git/HEAD
ref: refs/heads/master

cat .git/refs/heads/master
39bd985025d281e7c1d1c9493c90156fb9e26ea0
</code></pre>
<p>可以看出，HEAD指针指向分支指针，分支指针指向最新的commit</p>
<p>HEAD、分支、普通的Tag可以简单的理解成是一个指针，指向对应commit的SHA1值。</p>
<figure data-type="image" tabindex="3"><img src="https://leecss.com/post-images/1624773733859.png" alt="" loading="lazy"></figure>
<p>7、为什么要把文件的权限和文件名储存在Tree object里面而不是Blob object呢？</p>
<p>因为更改一个文件名就需要新建一个Blob object，假如文件很大的话，会很占空间，而Tree object体积相对很小</p>
<p>8、当你修改了其中一个文件，创建一个新的commit后</p>
<figure data-type="image" tabindex="4"><img src="https://leecss.com/post-images/1624774577309.png" alt="" loading="lazy"></figure>
<h2 id="git的三个分区">git的三个分区</h2>
<ul>
<li>工作目录 （ working directory ）：操作系统上的文件，所有代码开发编辑都在这上面完成。</li>
<li>索引（ index or staging area ）：可以理解为一个暂存区域，这里面的代码会在下一次commit被提交到Git仓库。</li>
<li>Git仓库（ git repository ）：由Git object记录着每一次提交的快照，以及链式结构记录的提交变更历史。</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://leecss.com/post-images/1624774695680.gif" alt="" loading="lazy"></figure>
<h2 id="转载">转载</h2>
<blockquote>
<p>李泽帆</p>
<p>https://www.lzane.com/tech/git-internal/</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-init]]></title>
        <id>https://leecss.com/post/git-init/</id>
        <link href="https://leecss.com/post/git-init/">
        </link>
        <updated>2021-06-27T05:58:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="将当前目录转为git仓库">将当前目录转为git仓库</h2>
<p><code>git init</code>命令将当前目录转为git仓库。</p>
<p>它会在当前目录下生成一个.git子目录，在其中写入git的配置和项目的快照。</p>
<h2 id="在当前目录下创建一个新的目录">在当前目录下创建一个新的目录</h2>
<pre><code class="language-sh">git init &lt;repository-name&gt;
git init place
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-安装]]></title>
        <id>https://leecss.com/post/git-an-zhuang/</id>
        <link href="https://leecss.com/post/git-an-zhuang/">
        </link>
        <updated>2021-06-27T05:57:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="windows">windows</h2>
<p>从官方网站上下载安装包，按照默认配置快速安装（一直下一步），访问git官网，即可下载git，git的官方网址如下：</p>
<p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>在windows中安装git的过程中，如果你没有修改默认的设置，当安装完成后，安装程序会自动为你安装两种客户端，一种是图形化的客户端，一种是命令行的客户端，图形化的客户端被称之为”Git GUI”，命令行的客户端被称之为”Git Bash”，在系统的”开始”菜单中可以找到”Git GUI”和”Git Bash”，同时，默认情况下，当你安装完成git后，你的右键菜单中会多出两个选项，”Git GUI Here”和”Git Bash Here”，通过这两项，你可以在任何目录中打开”Git GUI”和”Git Bash”，”Git GUI”和”Git Bash”都是客户端程序，我们可以通过这两种程序中的任意一种来操作git，从而达到版本控制的目的，这两种工具在不同的使用场景下各有优势，命令行的优势在于比较通用，而且当你需要编写一些版本控制的自动化脚本时，无可避免的需要使用git命令，使用图形化的好处就是比较直观，所以，我们有可能会交替的使用这两种工具，但是主要以命令行的使用模式为主，因为只要理解了相关概念和git命令后，再去使用任何一种图形化工具，都是非常简单的。</p>
<p>除了gitk（默认安装的图形化客户端就包含了gitk），比较出名的git图形化工具还有SourceTree、TortoiseGit、GitHubDesktop、GitKraken、GitUp等，当你熟悉了git命令以后，再去操作这些图形化工具都会变得游刃有余。</p>
<p><strong>打开gitk图形化操作界面</strong></p>
<pre><code class="language-sh">gitk
</code></pre>
<h2 id="初始化配置">初始化配置</h2>
<p>如果想要使用git进行版本管理，我们首先要做的就是，设置自己的”用户名”和”用户邮箱”，这些信息是必须的，特别是在多人协作时，这些信息也是非常必要的，所以，在完成安装操作以后，我们首先要做的就是设置自己的”用户名”和”用户邮箱”，这些信息只需要设置一次，就可以一直正常的使用git，除非你有需要修改这些信息。</p>
<h3 id="设置用户名和邮箱">设置用户名和邮箱</h3>
<pre><code class="language-sh">git config --global user.name &quot;lee&quot;
git config --global user.email &quot;lee@emial.com&quot;
</code></pre>
<h3 id="查看自己的用户名和邮箱设置">查看自己的用户名和邮箱设置</h3>
<pre><code class="language-sh">git config --global --list
</code></pre>
<h3 id="参数">参数</h3>
<pre><code class="language-sh">git config --system：使对应配置针对系统内所有的用户有效
git config --global：使对应配置针对当前系统用户的所有仓库生效
git config --local：使对应配置只针对当前仓库有效
local选项设置的优先级最高。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-push]]></title>
        <id>https://leecss.com/post/git-push/</id>
        <link href="https://leecss.com/post/git-push/">
        </link>
        <updated>2021-06-25T00:16:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。</p>
<p>git push和当前的HEAD指针位于哪里没关系，只要指定完整的格式，即使当前指针不在分支上，也可以推送到远程</p>
<pre><code class="language-shell">git checkout c0
git push origin master
</code></pre>
<p>当要推送到的目的分支不存在时，Git 会在远程仓库中根据你提供的名称帮你创建这个分支！</p>
<pre><code class="language-sh">git push origin main:newBranch
</code></pre>
<h2 id="命令">命令</h2>
<p>git push完整格式</p>
<pre><code class="language-sh">git push origin &lt;source&gt;:&lt;destination&gt;
git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
</code></pre>
<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<p><code>source</code> 可以是任何 Git 能识别的位置：</p>
<pre><code class="language-sh">git push origin foo^:main
</code></pre>
<p>Git 将 <code>foo^</code> 解析为一个位置，上传所有未被包含到远程仓库里 <code>main</code> 分支中的提交记录。</p>
<hr>
<p>如果省略远程分支名，则表示将本地分支推送与之存在&quot;追踪关系&quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<pre><code class="language-sh">git push origin master
</code></pre>
<p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p>
<hr>
<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<pre><code class="language-javascript">git push origin :master
// 等同于
git push origin --delete master
</code></pre>
<p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p>
<h2 id="追踪关系">追踪关系</h2>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<pre><code class="language-sh">git push origin
</code></pre>
<p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p>
<hr>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<pre><code class="language-sh">git push
</code></pre>
<hr>
<p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p>
<pre><code class="language-sh">git push -u origin master
</code></pre>
<p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p>
<h2 id="参数">参数</h2>
<h3 id="-all">--all</h3>
<p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p>
<pre><code class="language-sh">git config --global push.default matching
git config --global push.default simple
</code></pre>
<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p>
<pre><code class="language-sh">git push --all origin
</code></pre>
<p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p>
<h3 id="-force">--force</h3>
<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p>
<pre><code class="language-sh">git push --force origin 
</code></pre>
<p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p>
<h3 id="-tags">--tags</h3>
<p><code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。</p>
<pre><code class="language-sh">git push origin --tags
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-pull]]></title>
        <id>https://leecss.com/post/git-pull/</id>
        <link href="https://leecss.com/post/git-pull/">
        </link>
        <updated>2021-06-24T00:30:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>既然我们已经知道了如何用 <code>git fetch</code> 获取远程的数据, 现在我们学习如何将这些变化更新到我们的工作当中。</p>
<p>其实有很多方法的 —— 当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。也就是说就是你可以执行以下命令:</p>
<ul>
<li><code>git cherry-pick o/main</code></li>
<li><code>git rebase o/main</code></li>
<li><code>git merge o/main</code></li>
<li>等等</li>
</ul>
<p>实际上，由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。它就是我们要讲的 <code>git pull</code>。</p>
<p>即<code>git pull</code>相当于<code>git fetch</code> 和 <code>git merge o/main</code>的缩写，取回远程主机某个分支的更新，再与本地的指定分支合并。</p>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1624778165211.gif" alt="" loading="lazy"></figure>
<h2 id="注意点">注意点</h2>
<p>即使当前分支有没有 commit 的变动，也可以使用<code>git pull</code>从远程拉取分支。</p>
<h2 id="命令">命令</h2>
<p>git pull完整格式</p>
<pre><code class="language-sh">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
git pull origin next:master
</code></pre>
<hr>
<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<pre><code class="language-sh">git pull origin next
// 相当于
git fetch origin
git merge origin/next
</code></pre>
<h2 id="追踪关系">追踪关系</h2>
<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动&quot;追踪&quot;<code>origin/master</code>分支。</p>
<p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<pre><code class="language-sh">git branch --set-upstream-to=origin/[remote-branch] [branch]
</code></pre>
<hr>
<p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p>
<p>即本地的当前分支自动与对应的<code>origin</code>主机&quot;追踪分支&quot;（remote-tracking branch）进行合并。</p>
<pre><code class="language-sh">git pull origin
</code></pre>
<hr>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<p>即当前分支自动与唯一一个追踪分支进行合并。</p>
<pre><code class="language-sh">git pull
</code></pre>
<h2 id="参数">参数</h2>
<h3 id="-rebase">--rebase</h3>
<p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p>
<p><code>git pull --rebase</code>相当于<code>git fetch</code> 和 <code>git rebase o/main</code>的缩写</p>
<pre><code class="language-sh">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;
</code></pre>
<h3 id="-p">-p</h3>
<p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p>
<p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p>
<pre><code class="language-sh">git pull -p
// 等同于
git fetch --prune origin
git fetch -p
</code></pre>
<h2 id="详解">详解</h2>
<p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p>
<p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行 <code>git push</code>，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p>
<p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p>
<h3 id="解决方法">解决方法</h3>
<p>方式一：</p>
<pre><code class="language-sh">git fetch
git rebase o/main
git push
</code></pre>
<p>我们用 <code>git fetch</code> 更新了本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 <code>git push</code> 推送到远程仓库。</p>
<p>方式二：</p>
<pre><code>git fetch
git merge o/main
git push
</code></pre>
<p>我们用 <code>git fetch</code> 更新了本地仓库中的远程分支，然后<strong>合并</strong>了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 <code>git push</code> 把工作推送到远程仓库</p>
<p>尽管 <code>git merge</code> 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。</p>
<p>方式三：</p>
<p>很好！但是要敲那么多命令，有没有更简单一点的？</p>
<p>当然 —— 前面已经介绍过 <code>git pull</code> 就是 fetch 和 merge 的简写，类似的 <code>git pull --rebase</code> 就是 fetch 和 rebase 的简写！</p>
<pre><code class="language-sh">git pull --rebase
git push
</code></pre>
<pre><code class="language-sh">git pull
git push
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-fetch]]></title>
        <id>https://leecss.com/post/git-fetch/</id>
        <link href="https://leecss.com/post/git-fetch/">
        </link>
        <updated>2021-06-24T00:04:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>从远程仓库获取数据，一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到<code>git fetch</code>命令。</p>
<h3 id="git-fetch-做了些什么">git fetch 做了些什么</h3>
<p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p>
<ul>
<li>从远程仓库下载本地仓库中缺失的提交记录</li>
<li>更新远程分支指针(如 <code>o/main</code>)</li>
</ul>
<p><code>git fetch</code> 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。</p>
<p><code>git fetch</code> 通常通过互联网（使用 <code>http://</code> 或 <code>git://</code> 协议) 与远程仓库通信。</p>
<h3 id="git-fetch-不会做的事">git fetch 不会做的事</h3>
<p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p>
<p>理解这一点很重要，因为许多开发人员误以为执行了 <code>git fetch</code> 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是<strong>并没有</strong>修改你本地的文件。</p>
<p>所以, 你可以将 <code>git fetch</code> 的理解为单纯的下载操作。</p>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1624778106680.gif" alt="" loading="lazy"></figure>
<h2 id="命令">命令</h2>
<h3 id="获取更新">获取更新</h3>
<p>将某个远程主机的更新，全部取回本地。</p>
<pre><code class="language-sh">git fetch &lt;远程主机名&gt;
git fetch origin
</code></pre>
<p><code>git fetch</code>命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>
<p>默认情况下，<code>git fetch</code>取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<pre><code class="language-sh">git fetch &lt;远程主机名&gt; &lt;分支名&gt;
git fetch origin master
</code></pre>
<h3 id="使用更新">使用更新</h3>
<p>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支。</p>
<pre><code class="language-sh">git checkout -b newBrach origin/master
</code></pre>
<p>在本地分支上合并远程分支。</p>
<pre><code class="language-sh">git merge origin/master
git rebase origin/master
</code></pre>
]]></content>
    </entry>
</feed>