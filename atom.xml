<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>当下</title>
    <updated>2022-10-12T00:21:35.009Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://leecss.com/atom.xml"/>
    <logo>http://leecss.com/images/avatar.png</logo>
    <icon>http://leecss.com/favicon.ico</icon>
    <rights>All rights reserved 2022, 当下</rights>
    <entry>
        <title type="html"><![CDATA[157-data_structure-17-map~3无重复字符的最长字串]]></title>
        <id>http://leecss.com/post/157-data_structure-17-map~3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/</id>
        <link href="http://leecss.com/post/157-data_structure-17-map~3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan/">
        </link>
        <updated>2022-10-12T00:19:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="157-data_structure-17-map~3无重复字符的最长字串">157-data_structure-17-map~3无重复字符的最长字串</h1>
<h2 id="概述">概述</h2>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<h2 id="测试">测试</h2>
<pre><code>输入: s = &quot;abcabcbb&quot;
输出: 3 
解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。

输入: s = &quot;bbbbb&quot;
输出: 1
解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。

输入: s = &quot;pwwkew&quot;
输出: 3
解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。
     
输入: s = &quot;&quot;
输出: 0
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>先找出所有的不包含重复字符的字串</p>
<p>找出长度最大的那个字串，返回其长度即可</p>
<h2 id="解题步骤">解题步骤</h2>
<p>用双指针维护一个滑动窗口，用来剪切字串</p>
<p>不断移动右指针，遇到重复字符，就把左指针移动到重复字符的下一位</p>
<p>过程中，记录所有窗口的长度，并返回最大值</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * @param {string} s
 * @return {number}
 */
 var lengthOfLongestSubstring = function(s) {
  let l = 0
  let res = 0
  const map = new Map()
  for (let r = 0; r &lt; s.length; r += 1) {
    if ( map.has(s[r]) &amp;&amp; map.get(s[r]) &gt;= l ) {
      l = map.get(s[r]) + 1
    }
    res = Math.max(res, r - l + 1)
    map.set(s[r], r)
  }
  return res
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)，其中 n是s 的长度。</li>
<li>空间复杂度：O(m)，其中 m是临时存储 不重复字符的个数。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[156-data_structure-16-map~1两数之和]]></title>
        <id>http://leecss.com/post/156-data_structure-16-map~1-liang-shu-zhi-he/</id>
        <link href="http://leecss.com/post/156-data_structure-16-map~1-liang-shu-zhi-he/">
        </link>
        <updated>2022-10-12T00:16:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="156-data_structure-16-map~1两数之和">156-data_structure-16-map~1两数之和</h1>
<h2 id="概述">概述</h2>
<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<h2 id="测试">测试</h2>
<pre><code>输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

输入：nums = [3,2,4], target = 6
输出：[1,2]

输入：nums = [3,3], target = 6
输出：[0,1]
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>把nums想象成相亲者</p>
<p>把target想象成匹配条件</p>
<p>用字典建立一个婚姻介绍所，存储相亲者的数字和下标</p>
<h2 id="解题步骤">解题步骤</h2>
<p>新建一个字典作为婚姻介绍所</p>
<p>nums里的值，逐个来介绍所找对象，没有合适的就先登记着，有合适的就牵手成功</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
 var twoSum = function(nums, target) {
  const map = new Map()
  for (let i = 0,len = nums.length; i &lt; len; i += 1) {
    const value = nums[i]
    const matching = target - value
    if ( map.has(matching) ) {
      return [map.get(matching), i]
    } else {
      map.set(value, i)
    }
  }
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)，其中 n是nums 的长度。</li>
<li>空间复杂度：O(n)，其中 n是临时存储 map的长度。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[155-data_structure-15-map~20有效的括号]]></title>
        <id>http://leecss.com/post/155-data_structure-15-map~20-you-xiao-de-gua-hao/</id>
        <link href="http://leecss.com/post/155-data_structure-15-map~20-you-xiao-de-gua-hao/">
        </link>
        <updated>2022-10-12T00:14:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="155-data_structure-15-map~20有效的括号">155-data_structure-15-map~20有效的括号</h1>
<h2 id="概述">概述</h2>
<p>给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>
左括号必须以正确的顺序闭合。</p>
<h2 id="测试">测试</h2>
<pre><code>输入：s = &quot;()&quot;
输出：true

输入：s = &quot;()[]{}&quot;
输出：true

输入：s = &quot;(]&quot;
输出：false

输入：s = &quot;([)]&quot;
输出：false

输入：s = &quot;{[]}&quot;
输出：true
</code></pre>
<h2 id="解题思路">解题思路</h2>
<pre><code>{[()]}
</code></pre>
<p>1、需要遍历所有字符串</p>
<p>2、遇到左括号先略过，遇到右括号开始匹配，匹配的是最后遇到的左括号</p>
<p>3、<strong>后进先出</strong>模式，左括号逐一入栈，若遇到右括号，则取栈顶元素左括号</p>
<p>4、使用map优化</p>
<h2 id="解题步骤">解题步骤</h2>
<p>1、新建一个栈<br>
2、扫描字符串，遇左括号入栈，遇到和栈顶括号类型匹配的右括号就出栈，类型不匹配直接判定为不合法<br>
3、最后栈空了就合法，否则不合法</p>
<p>4、使用map判断是否为左括号或右括号</p>
<h2 id="代码">代码</h2>
<pre><code class="language-javascript">/**
 * @param {string} s
 * @return {boolean}
 */
 var isValid = function(s) {
  if (s.length % 2 === 1) {
    return false
  }
  const stack = []
  const map = new Map()
  map.set('(', ')')
  map.set('[', ']')
  map.set('{', '}')
  for (const value of s) {
    if ( map.has(value) ) {
      stack.push(value)
    }else {
      const stack_top = stack[stack.length-1]
      if ( map.get(stack_top) === value ) {
        stack.pop()
      }else {
        return false
      }
    }
  }
  return stack.length === 0
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)，其中 n是字符串 s 的长度。</li>
<li>空间复杂度：O(n)，其中 n是临时存储 stack 的长度。</li>
</ul>
<h2 id="总结">总结</h2>
<p>1、栈适合解决对称类问题</p>
<p>2、先分析不合理情况，若存在，则提前返回</p>
<p>3、map建立映射关系，取键值对的值</p>
<h2 id="推荐阅读">推荐阅读</h2>
<p><a href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html">代码随想录</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[154-data_structure-14-map~349两个数组的交集]]></title>
        <id>http://leecss.com/post/154-data_structure-14-map~349-liang-ge-shu-zu-de-jiao-ji/</id>
        <link href="http://leecss.com/post/154-data_structure-14-map~349-liang-ge-shu-zu-de-jiao-ji/">
        </link>
        <updated>2022-10-12T00:11:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="154-data_structure-14-map~349两个数组的交集">154-data_structure-14-map~349两个数组的交集</h1>
<h2 id="概述">概述</h2>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p><strong>说明：</strong></p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<h2 id="测试">测试</h2>
<pre><code>输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>求nums1和nums2都有的值</p>
<p>用字典建立一个映射关系，记录nums1里有的值</p>
<p>遍历nums2，找出nums1里也有的值</p>
<h2 id="解题步骤">解题步骤</h2>
<p>新建一个字典，遍历nums1，填充字典</p>
<p>遍历nums2，遇到字典里的值就选出，并从字典中删除</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
 var intersection = function(nums1, nums2) {
  const map = new Map()
  const res = []
  nums1.forEach(n =&gt; {
    map.set(n, true)
  })
  nums2.forEach(n =&gt; {
    if ( map.get(n) ) {
      res.push(n)
      map.delete(n)
    }
  })
  return res
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(m + n)，m为nums1的长度，n为nums2的长度</li>
<li>空间复杂度：O(m)，m为临时存储map的长度</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[153-data_structure-13-map~字典简介]]></title>
        <id>http://leecss.com/post/153-data_structure-13-map~zi-dian-jian-jie/</id>
        <link href="http://leecss.com/post/153-data_structure-13-map~zi-dian-jian-jie/">
        </link>
        <updated>2022-10-12T00:08:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="153-data_structure-13-map~字典简介">153-data_structure-13-map~字典简介</h1>
<h2 id="概述">概述</h2>
<p>与集合类似，字典也是一种存储唯一值的数据结构，但它是以<strong>键值对</strong>的形式来存储。</p>
<p>ES6 有字典 名为Map（映射）</p>
<p>字典的常用操作：键值对的增删改查</p>
<h2 id="应用">应用</h2>
<p>ES6map对象</p>
<pre><code class="language-js">const m = new Map();

// 增
m.set('a', 'aa');
m.set('b', 'bb');

// 删
m.delete('b');
// m.clear();

// 改
m.set('a', 'aaa');

// 查
m.get('a');
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[152-data_structure-12-set~349两个数组的交集]]></title>
        <id>http://leecss.com/post/152-data_structure-12-set~349-liang-ge-shu-zu-de-jiao-ji/</id>
        <link href="http://leecss.com/post/152-data_structure-12-set~349-liang-ge-shu-zu-de-jiao-ji/">
        </link>
        <updated>2022-10-11T23:59:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="152-data_structure-12-set~349两个数组的交集">152-data_structure-12-set~349两个数组的交集</h1>
<h2 id="概述">概述</h2>
<p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p><strong>说明：</strong></p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<h2 id="测试">测试</h2>
<pre><code>输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>求交集且无序唯一</p>
<p>使用集合</p>
<h2 id="解题步骤">解题步骤</h2>
<p>用集合对nums1去重</p>
<p>遍历nums1，筛选出nums2也包含的值</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number[]}
 */
 var intersection = function(nums1, nums2) {
  return [...new Set(nums1)].filter(n =&gt; nums2.includes(n))
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(m * n)，m为nums1的长度，n为nums2的长度</li>
<li>空间复杂度：O(m)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[151-data_structure-11-set~集合简介]]></title>
        <id>http://leecss.com/post/151-data_structure-11-set~ji-he-jian-jie/</id>
        <link href="http://leecss.com/post/151-data_structure-11-set~ji-he-jian-jie/">
        </link>
        <updated>2022-10-11T23:56:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="151-data_structure-11-set~集合简介">151-data_structure-11-set~集合简介</h1>
<h2 id="概述">概述</h2>
<p>无序且唯一的数据结构</p>
<p>es6中有集合，名为Set</p>
<p>集合的常用操作：去重、判断元素是否在集合中、求交集</p>
<h2 id="应用">应用</h2>
<pre><code class="language-js">// 去重
const arr = [1, 1, 2, 2];
const arr2 = [...new Set(arr)];

// 判断元素是否在集合中
const set = new Set(arr);
const has = set.has(3);

// 求交集
const set2 = new Set([2, 3]);
const set3 = new Set([...set].filter(item =&gt; set2.has(item)));
</code></pre>
<h2 id="前端与集合">前端与集合</h2>
<h3 id="es6set对象">ES6set对象</h3>
<h4 id="概述-2">概述</h4>
<p>使用Set对象：new、add、delete、has、size</p>
<p>迭代Set: 多种迭代方法、Set与Array互转、求交集/差集</p>
<h4 id="代码">代码</h4>
<p>1、基本使用</p>
<pre><code class="language-js">let mySet = new Set();

mySet.add(1);
mySet.add(5);
mySet.add(5);
mySet.add('some text');
let o = { a: 1, b: 2 };
mySet.add(o);
mySet.add({ a: 1, b: 2 });

const has = mySet.has(o);

mySet.delete(5);
</code></pre>
<p>2、迭代</p>
<pre><code>集合set 的迭代
1. for of
2. 配合 keys 和 values 方法 ，在集合中，keys 和 values 是一样的
3. entries 方法
</code></pre>
<p>3、与数组转换</p>
<pre><code>set 转换成 array:
1. [...set]
2. Array.from(set)

array 转换成 set：
1. set = new Set(arr)
</code></pre>
<p>4、交集和差集</p>
<pre><code class="language-js">const intersection = new Set([...mySet].filter(x =&gt; mySet2.has(x)));
const difference = new Set([...mySet].filter(x =&gt; !mySet2.has(x)));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[150-data_structure-10-linkedlist~141环形链表]]></title>
        <id>http://leecss.com/post/150-data_structure-10-linkedlist~141-huan-xing-lian-biao/</id>
        <link href="http://leecss.com/post/150-data_structure-10-linkedlist~141-huan-xing-lian-biao/">
        </link>
        <updated>2022-10-11T23:46:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="150-data_structure-10-linkedlist~141环形链表">150-data_structure-10-linkedlist~141环形链表</h2>
<h2 id="概述">概述</h2>
<p>给定一个链表，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p>
<h2 id="测试">测试</h2>
<pre><code>3-&gt;2-&gt;0-&gt;4
   ^     |
   -------
输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。

1-&gt;2
^--|
输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。

输入：head = [1], pos = -1
输出：false
解释：链表中没有环。
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>两个人在圆形操场上的起点同时起跑，速度快的人一定会超过速度慢的人一圈。</p>
<p>用一快一慢两个指针遍历链表，如果指针能够相逢，那么链表就有圈。</p>
<h2 id="解题步骤">解题步骤</h2>
<p>用一快一慢两个指针遍历链表，如果指针能够相逢，就返回true。</p>
<p>遍历结束后，还没有相逢就返回false。</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
 var hasCycle = function(head) {
  let p1 = head
  let p2 = head
  while (p1 &amp;&amp; p2 &amp;&amp; p2.next) {
    p1 = p1.next
    p2 = p2.next.next    
    if (p1 === p2) {
      return true
    }
  }
  return false
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[149-data_structure-9-linkedlist~83删除排序链表中的重复元素]]></title>
        <id>http://leecss.com/post/149-data_structure-9-linkedlist~83-shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su/</id>
        <link href="http://leecss.com/post/149-data_structure-9-linkedlist~83-shan-chu-pai-xu-lian-biao-zhong-de-chong-fu-yuan-su/">
        </link>
        <updated>2022-10-11T23:45:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="149-data_structure-9-linkedlist~83删除排序链表中的重复元素">149-data_structure-9-linkedlist~83删除排序链表中的重复元素</h2>
<h2 id="概述">概述</h2>
<p>存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除所有重复的元素，使每个元素 <strong>只出现一次</strong> 。</p>
<p>返回同样按升序排列的结果链表。</p>
<h2 id="测试">测试</h2>
<pre><code>1-&gt;1-&gt;2
1-&gt;2
输入：head = [1,1,2]
输出：[1,2]

1-&gt;1-&gt;2-&gt;3-&gt;3
1-&gt;2-&gt;3
输入：head = [1,1,2,3,3]
输出：[1,2,3]
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>因为链表是有序的，所以重复元素一定相邻</p>
<p>遍历链表如果发现当前元素和下个元素相同，就删除下个元素</p>
<h2 id="解题步骤">解题步骤</h2>
<p>遍历链表，如果发现当前元素和下个元素值相同，就删除下个元素值。</p>
<p>遍历结束后，返回原链表的头部</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
 var deleteDuplicates = function(head) {
  let p = head
  while (p &amp;&amp; p.next) {
    if (p.val === p.next.val) {
      p.next = p.next.next
    } else {
      p = p.next
    }
  }
  return head
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[148-data_structure-8-linkedlist~2两数相加]]></title>
        <id>http://leecss.com/post/148-data_structure-8-linkedlist~2-liang-shu-xiang-jia/</id>
        <link href="http://leecss.com/post/148-data_structure-8-linkedlist~2-liang-shu-xiang-jia/">
        </link>
        <updated>2022-10-11T23:43:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="148-data_structure-8-linkedlist~2两数相加">148-data_structure-8-linkedlist~2两数相加</h1>
<h2 id="概述">概述</h2>
<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h2 id="测试">测试</h2>
<pre><code>2-&gt;4-&gt;3
5-&gt;6-&gt;4
-------
7-&gt;0-&gt;8

输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.

输入：l1 = [0], l2 = [0]
输出：[0]

输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
</code></pre>
<h2 id="解题思路">解题思路</h2>
<p>小学数学题，模拟相加操作</p>
<p>需要遍历链表</p>
<h2 id="解题步骤">解题步骤</h2>
<p>新建一个空链表</p>
<p>遍历被相加的两个链表，模拟相加操作，将个位数追加到新链表上，将十位数留到下一位去相加。</p>
<h2 id="代码">代码</h2>
<pre><code class="language-js">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
 var addTwoNumbers = function(l1, l2) {
  const l3 = new ListNode(0)
  let p1 = l1
  let p2 = l2
  let p3 = l3
  let carry = 0
  while (p1 || p2) {
    const v1 = p1 ? p1.val : 0
    const v2 = p2 ? p2.val : 0
    const val = v1 + v2 + carry
    carry = Math.floor(val / 10)
    p3.next = new ListNode(val % 10)
    if (p1) {
      p1 = p1.next
    }
    if (p2) {
      p2 = p2.next
    }
    p3 = p3.next
  }
  if (carry) {
    p3.next = new ListNode(carry)
  }
  return l3.next
};
</code></pre>
<h2 id="复杂度">复杂度</h2>
<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
]]></content>
    </entry>
</feed>