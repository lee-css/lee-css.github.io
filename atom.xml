<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leecss.com</id>
    <title>当下</title>
    <updated>2021-07-02T00:46:37.716Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leecss.com"/>
    <link rel="self" href="https://leecss.com/atom.xml"/>
    <logo>https://leecss.com/images/avatar.png</logo>
    <icon>https://leecss.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 当下</rights>
    <entry>
        <title type="html"><![CDATA[git-stash]]></title>
        <id>https://leecss.com/post/git-stash/</id>
        <link href="https://leecss.com/post/git-stash/">
        </link>
        <updated>2021-07-02T00:44:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git stash</code>命令用于暂时保存没有提交的工作。运行该命令后，所有没有commit的代码，都会暂时从工作区移除，回到上次commit时的状态。</p>
<h2 id="命令">命令</h2>
<h3 id="新增暂存">新增暂存</h3>
<p>暂时保存没有提交的工作</p>
<pre><code class="language-sh">git stash
</code></pre>
<h3 id="查看暂存">查看暂存</h3>
<p>查看暂存列表</p>
<pre><code class="language-sh">git stash list
---
stash@{0}: WIP on workbranch: 56cd5d4 Revert &quot;update old files&quot;
stash@{1}: WIP on project1: 1dd87ea commit &quot;fix typos and grammar&quot;
</code></pre>
<p>展示目前存在的stash</p>
<pre><code class="language-sh">git stash show -p
</code></pre>
<h3 id="恢复暂存">恢复暂存</h3>
<h4 id="需手动删除">需手动删除</h4>
<p>恢复stash 列表的第一条stash 的内容，即最近的一次暂存,不会自动删除取出的修改</p>
<pre><code>git stash apply stash@{0}
</code></pre>
<p>取出指定某一次的修改,不会自动删除取出的修改</p>
<pre><code class="language-sh">git stash apply stash@{[number]}
git stash apply stash@{1}
</code></pre>
<hr>
<h4 id="自动删除">自动删除</h4>
<p>恢复stash 列表的第一条stash 的内容并自动删除</p>
<pre><code class="language-sh">git stash pop stash@{0}
</code></pre>
<p>取出最近一次的修改并自动删除，作用同上，书写更简便</p>
<pre><code class="language-sh">git stash pop
</code></pre>
<h3 id="删除暂存">删除暂存</h3>
<p>删除stash 列表的第一条stash 的内容</p>
<pre><code class="language-sh">git stash drop stash@{0}
</code></pre>
<p>清空stash 列表</p>
<pre><code class="language-sh">git stash clear
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-remote]]></title>
        <id>https://leecss.com/post/git-remote/</id>
        <link href="https://leecss.com/post/git-remote/">
        </link>
        <updated>2021-07-02T00:18:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>此命令用于管理远程主机(仓库)</p>
<h2 id="命令">命令</h2>
<h3 id="查看">查看</h3>
<p>列出所有远程主机</p>
<pre><code class="language-sh">git remote
---
origin
</code></pre>
<p>查看远程主机的网址</p>
<pre><code class="language-sh">git remote -v
---
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
</code></pre>
<p>查看该主机的详细信息</p>
<pre><code class="language-sh">git remote show &lt;主机名&gt;
</code></pre>
<h3 id="添加">添加</h3>
<p>添加远程主机</p>
<pre><code>git remote add &lt;主机名&gt; &lt;网址&gt;
</code></pre>
<h3 id="删除">删除</h3>
<p>删除远程主机</p>
<pre><code class="language-sh">git remote rm &lt;主机名&gt;
</code></pre>
<h3 id="更改名称">更改名称</h3>
<p>更改远程主机的名称</p>
<pre><code class="language-sh">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></pre>
<p>克隆时指定名称</p>
<pre><code class="language-sh">git clone -o &lt;主机名&gt; &lt;网址&gt;
git clone -o jQuery https://github.com/jquery/jquery.git

git remote
---
jQuery
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-mv]]></title>
        <id>https://leecss.com/post/git-mv/</id>
        <link href="https://leecss.com/post/git-mv/">
        </link>
        <updated>2021-07-01T14:44:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>平时我们会遇到重命名文件的情况，git会把重命名的操作理解为以下几步</p>
<p>1、先删除了原文件</p>
<p>2、添加了新文件</p>
<p>3、将变更添加到暂存区</p>
<p>以上几步可以使用git命令直接完成</p>
<pre><code class="language-sh">git mv [old-name] [new-name]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-rm]]></title>
        <id>https://leecss.com/post/git-rm/</id>
        <link href="https://leecss.com/post/git-rm/">
        </link>
        <updated>2021-07-01T14:34:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>平时我们都会有删除文件的需求，正常操作为</p>
<p>1、在文件系统中删除某文件</p>
<p>2、在git中将删除文件的变更添加到暂存区。</p>
<p>上述两步操作可以通过一条命令来完成，即</p>
<pre><code class="language-sh">git rm [file]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-rev-parse]]></title>
        <id>https://leecss.com/post/git-rev-parse/</id>
        <link href="https://leecss.com/post/git-rev-parse/">
        </link>
        <updated>2021-06-30T15:48:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>显示某个指示符的SHA1哈希值。</p>
<h2 id="命令">命令</h2>
<p>通过提交名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse HEAD
</code></pre>
<p>通过哈希码的缩写获取到完整的哈希码</p>
<pre><code class="language-sh">git rev-parse a63d5b
</code></pre>
<p>通过分支名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse master
</code></pre>
<p>通过标签名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse v1.0.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-diff]]></title>
        <id>https://leecss.com/post/git-diff/</id>
        <link href="https://leecss.com/post/git-diff/">
        </link>
        <updated>2021-06-30T15:37:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git diff</code>命令用于查看文件之间的差异。</p>
<h2 id="命令">命令</h2>
<h3 id="工作区与暂存区">工作区与暂存区</h3>
<p>查看工作区与暂存区的差异</p>
<pre><code class="language-sh">git diff
</code></pre>
<p>查看工作区与暂存区某个文件的差异</p>
<pre><code class="language-sh">git diff [file]
git diff file.txt
// 或
git diff -- [file]
git diff -- ./[file]
</code></pre>
<p>查看工作区与暂存区多个文件的差异，以空格分隔</p>
<pre><code class="language-sh">git diff -- [file1] [file2]
</code></pre>
<p>查看工作区与暂存区目录下所有文件的差异</p>
<pre><code class="language-sh">git diff -- [dir]/
</code></pre>
<h3 id="工作区与commit快照">工作区与commit快照</h3>
<p>查看工作区与上一次commit之间的差异</p>
<pre><code class="language-sh">git diff HEAD
</code></pre>
<p>查看工作区与某个 commit 的差异</p>
<pre><code class="language-sh">git diff [commit]
</code></pre>
<hr>
<p>当我们修改工作区的内容后，我们没有暂存，也没有提交，所以此时暂存区和仓库的状态是相同的。</p>
<p>即此时<code>git diff</code> 与<code>git diff HEAD</code>返回的结果是完全相同的</p>
<hr>
<p>当我们执行<code>git add</code>命令后，此时<code>git diff</code>不会显示任何内容，因为此时工作区与暂存区没有差异。</p>
<p>但是如果执行<code>git diff HEAD</code>命令，仍然可以查看到工作区和提交之间的差异。</p>
<hr>
<p>假如此时再次修改工作区的内容，我们就能同时对比工作区和(暂存区/仓库)的差异</p>
<p>并且此时暂存区和仓库也是有差异的</p>
<h3 id="暂存区与仓库区">暂存区与仓库区</h3>
<p>查看暂存区与当前 commit 的差异</p>
<pre><code class="language-sh">git diff --cached
</code></pre>
<h3 id="对比两次提交">对比两次提交</h3>
<p>显示两次提交之间的差异</p>
<pre><code class="language-sh">git diff [first-commit] [second-commit]
</code></pre>
<p>我们也可以使用引用，更加方便的对比，比如：最新提交和上一次提交</p>
<pre><code class="language-sh">git diff HEAD HEAD~
</code></pre>
<h3 id="对比两个分支">对比两个分支</h3>
<p>即对比两个分支上最新提交之间的差异</p>
<pre><code class="language-sh">git diff [first-branch] [second-branch]
git diff master dev
// 等效于
git diff [first-branch]..[second-branch]
git diff maste..dev
</code></pre>
<p>查看自从topic分支建立以后，master分支发生的变化</p>
<pre><code class="language-sh">git diff topic...master
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-reflog]]></title>
        <id>https://leecss.com/post/git-reflog/</id>
        <link href="https://leecss.com/post/git-reflog/">
        </link>
        <updated>2021-06-30T15:35:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>相当于版本控制的版本控制</p>
<p>git reflog 可以查看所有分支的所有操作记录</p>
<p>包括已经被删除的 commit 记录</p>
<h2 id="应用场景">应用场景</h2>
<p>分支误删除；</p>
<p>节点误回退</p>
<p>git rebase等等</p>
<p>我们都可以从git reflog中找到操作记录</p>
<p>这时，我们找到要恢复的commitID</p>
<p>执行以下命令即可</p>
<pre><code class="language-sh">git reset --hard [commitID]
</code></pre>
<p>假如说回退的节点之后，又添加了一些提交，可以配合使用cherry-pick</p>
<pre><code class="language-sh">git cherry-pick [commitID]
</code></pre>
<h2 id="与git-log的对比">与git log的对比</h2>
<h3 id="reflog">reflog</h3>
<p>reflog是一个本地结构，它记录了HEAD和分支引用在过去指向的位置，即HEAD指向的提交的有序列表。</p>
<p>reflog信息没法与其他任何人共享，每个人都是自己特有的reflog。</p>
<p>重要的一点是，它不是永久保存的，有一个可配置的过期时间，reflog中过期的信息会被自动删除。</p>
<h3 id="log">log</h3>
<p>git log显示当前HEAD及其祖先。</p>
<p>也就是说，它打印提交HEAD指向，然后它的父，其父，等等。</p>
<p>它通过递归查找每个提交的父进程遍历回购的祖先。</p>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1625067362274.gif" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://leecss.com/post-images/1625067370478.gif" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-log]]></title>
        <id>https://leecss.com/post/git-log/</id>
        <link href="https://leecss.com/post/git-log/">
        </link>
        <updated>2021-06-29T23:17:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git log</code>命令按照提交时间从最晚到最早的顺序，列出所有 commit。</p>
<h2 id="命令">命令</h2>
<h3 id="当前分支全部历史">当前分支全部历史</h3>
<p>列出当前分支的版本历史</p>
<pre><code class="language-sh">git log
</code></pre>
<p><code>--oneline</code>参数让输出时，每个 commit 只占用一行。</p>
<pre><code class="language-sh">git log --oneline
</code></pre>
<h3 id="某文件版本历史">某文件版本历史</h3>
<p>列出某个文件的版本历史，包括文件改名</p>
<pre><code class="language-sh">git log --follow [file]
</code></pre>
<h3 id="分支变动历史">分支变动历史</h3>
<p>查看远程分支的变动情况。</p>
<pre><code class="language-sh">git log remote/branch
</code></pre>
<h3 id="搜索查找历史">搜索查找历史</h3>
<p>查找log，即搜索commit信息。</p>
<p><code>-i</code>参数表示搜索时忽略大小写。</p>
<pre><code>git log --author=Andy
git log -i --grep=&quot;Something in the message&quot;
</code></pre>
<h3 id="美化输出">美化输出</h3>
<ul>
<li>—graph commit之间将展示连线</li>
<li>—decorate 显示commit里面的分支</li>
<li>—pretty=oneline 只显示commit信息的标题</li>
<li>—abbrev-commit 只显示commit SHA1的前7位</li>
</ul>
<pre><code>git log --graph --decorate --pretty=oneline --abbrev-commit
</code></pre>
<h2 id="退出">退出</h2>
<p>按Q退出</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-restore]]></title>
        <id>https://leecss.com/post/git-restore/</id>
        <link href="https://leecss.com/post/git-restore/">
        </link>
        <updated>2021-06-29T15:24:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>因为git checkout 命令职责较多、不够明确，所以git 2.23 版本新增了switch、restore命令</p>
<p>switch命令专门用来切换分支、创建并切换分支等</p>
<p>restore命令专门用来恢复(撤销)暂存区和工作区的文件</p>
<h2 id="命令">命令</h2>
<p>为了方便初步理解，先使用撤销</p>
<h3 id="撤销工作区文件的修改">撤销工作区文件的修改</h3>
<p>撤销工作区指定文件的修改 ，即从暂存区覆盖到工作区</p>
<p>--worktree为默认参数，可以省略</p>
<pre><code>git restore [--worktree] [file]
</code></pre>
<p>撤销工作区所有文件</p>
<pre><code class="language-sh">git restore .
</code></pre>
<h3 id="撤销暂存区文件的修改">撤销暂存区文件的修改</h3>
<p>撤销暂存区指定文件的修改，即从仓库覆盖到暂存区。但是被撤销的文件不会更改，会恢复到工作区。</p>
<pre><code class="language-sh">git restore --staged [file]
</code></pre>
<p>撤销暂存区所有文件</p>
<pre><code class="language-sh">git restore --staged .
</code></pre>
<h3 id="撤销工作区和暂存区文件的修改">撤销工作区和暂存区文件的修改</h3>
<p>撤销工作区和暂存区文件的修改，即从仓库到暂存区和工作区</p>
<pre><code class="language-sh">git restore --staged --worktree [file]
</code></pre>
<h3 id="切换工作区内容">切换工作区内容</h3>
<p>将工作区内容切换到某个快照</p>
<pre><code class="language-sh">git restore --source [commitID]
// 工作区切换到上次提交
git restore --source HEAD~
</code></pre>
<h2 id="参数详解">参数详解</h2>
<p>进一步理解，使用恢复</p>
<p>恢复一个文件，从哪里到哪里</p>
<p>--source 来源地，即从哪里</p>
<p>--staged 目的地，即到哪里(暂存区)</p>
<p>--worktree 目的地，即到哪里(工作区)</p>
<p>举例说明：假如把readme.md从上次提交同时恢复到暂存区和工作区</p>
<pre><code class="language-sh">git restore --source HEAD~ --staged --worktree readme.md
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1624980286919.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-switch]]></title>
        <id>https://leecss.com/post/git-switch/</id>
        <link href="https://leecss.com/post/git-switch/">
        </link>
        <updated>2021-06-28T14:43:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>因为git checkout 命令职责较多、不够明确，所以git 2.23 版本新增了switch、restore命令</p>
<p>switch命令专门用来切换分支、创建并切换分支等</p>
<h2 id="命令">命令</h2>
<h3 id="新建分支">新建分支</h3>
<p>新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name]
git switch -c new
</code></pre>
<p>从某个快照新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name] [commitID]
git switch -c new c2
</code></pre>
<p>从某个标签新建并切换分支</p>
<pre><code class="language-sh">git switch -c [branch-name] [tag-name]
git switch -c new v2.0
</code></pre>
<h3 id="切换分支">切换分支</h3>
<p>切换上次所在的分支</p>
<pre><code class="language-sh">git switch -
</code></pre>
<p>切换到<code>dev</code>分支</p>
<pre><code class="language-sh">git switch dev
</code></pre>
<h2 id="与checkout的对比">与checkout的对比</h2>
<h3 id="checkout">checkout</h3>
<p>checkout在分支方面的做用有两点：新建分支并切换到新建分支，切换分支</p>
<pre><code class="language-sh">git checkout -b new
git checkout dev
</code></pre>
<h3 id="switch">switch</h3>
<p>switch中相同作用的命令</p>
<pre><code class="language-sh">git switch -c new
git switch dev
</code></pre>
]]></content>
    </entry>
</feed>