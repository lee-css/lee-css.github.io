<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leecss.com</id>
    <title>当下</title>
    <updated>2021-06-17T03:44:29.417Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leecss.com"/>
    <link rel="self" href="https://leecss.com/atom.xml"/>
    <logo>https://leecss.com/images/avatar.png</logo>
    <icon>https://leecss.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 当下</rights>
    <entry>
        <title type="html"><![CDATA[git-rebase]]></title>
        <id>https://leecss.com/post/git-rebase/</id>
        <link href="https://leecss.com/post/git-rebase/">
        </link>
        <updated>2021-06-17T03:43:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>将当前分支移植到指定分支或指定commit之上。</p>
<p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p>
<p>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p>
<pre><code class="language-sh">git rebase master
</code></pre>
<p>将当前分支移植到master分支之上。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-merge]]></title>
        <id>https://leecss.com/post/git-merge/</id>
        <link href="https://leecss.com/post/git-merge/">
        </link>
        <updated>2021-06-17T03:36:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git merge</code>命令用于合并指定分支到当前分支</p>
<pre><code class="language-sh">git merge develop
</code></pre>
<p>将develop分支合并到当前分支，产生的新的commit对象有两个父节点。</p>
<p>如果“指定分支”本身是当前分支的一个直接子节点，则会产生fast-forward合并，即合并不会产生新的节点，只是让当前分支指向“指定分支”的最新commit。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-commit]]></title>
        <id>https://leecss.com/post/git-commit/</id>
        <link href="https://leecss.com/post/git-commit/">
        </link>
        <updated>2021-06-17T03:29:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git commit</code>命令用于将暂存区中的变化提交到仓库区。</p>
<p><code>-m</code>参数用于指定 commit 信息，是必需的。如果省略<code>-m</code>参数，<code>git commit</code>会自动打开文本编辑器，要求输入。</p>
<pre><code class="language-sh">git commit -m &quot;message&quot;
</code></pre>
<h2 id="命令行参数">命令行参数</h2>
<h3 id="-a">-a</h3>
<p><code>-a</code>参数用于先将所有工作区的变动文件，提交到暂存区，再运行<code>git commit</code>。</p>
<pre><code class="language-sh">git commit -am &quot;message&quot;
</code></pre>
<blockquote>
<p>用了<code>-a</code>参数，是不是就不用执行<code>git add .</code>命令了？不是。</p>
<p><code>-m</code>参数用于提交暂存区的文件</p>
<p><code>-a</code>参数用于提交追踪过的文件</p>
<p>文件状态按已追踪和未追踪区分，新增的文件为未追踪，<code>git add</code>后的文件为已追踪</p>
<p>所以新增的文件还是要执行<code>git add .</code>命令</p>
</blockquote>
<h3 id="amend">—amend</h3>
<p><code>--amend</code>参数用于撤销上一次 commit，然后生成一个新的 commit。</p>
<pre><code class="language-sh">git commit --amend -m &quot;new commit message&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-add]]></title>
        <id>https://leecss.com/post/git-add/</id>
        <link href="https://leecss.com/post/git-add/">
        </link>
        <updated>2021-06-17T02:46:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git add</code>命令用于将变化的文件，从工作区提交到暂存区。</p>
<p>将指定文件放入暂存区</p>
<pre><code class="language-sh">git add &lt;file&gt;
</code></pre>
<p>将指定目录下所有变化的文件，放入暂存区</p>
<pre><code class="language-sh">git add &lt;directory&gt;
</code></pre>
<p>将当前目录下所有变化的文件，放入暂存区</p>
<pre><code class="language-sh">git add .
</code></pre>
<h2 id="参数">参数</h2>
<p><code>-u</code>参数表示只添加暂存区已有的文件（包括删除操作），但不添加新增的文件。</p>
<pre><code class="language-sh">git add -u
</code></pre>
<p><code>-A</code>或者<code>--all</code>参数表示追踪所有操作，包括新增、修改和删除。</p>
<p>Git 2.0 版开始，<code>-A</code>参数成为默认，即<code>git add .</code>等同于<code>git add -A</code>。</p>
<pre><code class="language-sh">git add -A
</code></pre>
<p><code>-f</code>参数表示强制添加某个文件，不管<code>.gitignore</code>是否包含了这个文件。</p>
<pre><code class="language-sh">git add -f &lt;fileName&gt;
</code></pre>
<p><code>-p</code>参数表示进入交互模式，指定哪些修改需要添加到暂存区。即使是同一个文件，也可以只提交部分变动。</p>
<p>问跟踪(即新增的)文件不在此参数范围内</p>
<pre><code class="language-sh">git add -p
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-branch]]></title>
        <id>https://leecss.com/post/git-branch/</id>
        <link href="https://leecss.com/post/git-branch/">
        </link>
        <updated>2021-06-16T14:59:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-查看分支">1、查看分支</h2>
<p>*表示当前分支</p>
<p>查看所有本地分支</p>
<pre><code class="language-sh">git branch
</code></pre>
<p>查看所有远程分支</p>
<pre><code class="language-shell">git branch -r
</code></pre>
<p>查看所有本地分支和远程分支</p>
<pre><code class="language-sh">git branch -a
</code></pre>
<h2 id="2-新建分支">2、新建分支</h2>
<h3 id="新建本地分支">新建本地分支</h3>
<p>直接在<code>git branch</code>后面跟上分支名，就表示新建该分支。</p>
<pre><code class="language-sh">git branch [branch-name]
</code></pre>
<p>创建后，还是停留在原来分支，需要用<code>git checkout</code>切换到新建分支</p>
<pre><code class="language-sh">git checkout [branch-name]
</code></pre>
<p>使用<code>-b</code>参数，可以新建的同时，切换到新分支。</p>
<pre><code class="language-sh">git checkout -b [branch-name]
</code></pre>
<p>新建一个分支，与指定的远程分支建立追踪关系</p>
<pre><code class="language-sh">git branch --track [branch] origin/[remote-branch]
</code></pre>
<h3 id="新建远程分支">新建远程分支</h3>
<p>创建远程分支</p>
<p>创建远程分支的前提是本地有这个分支，推送到远程后，因为远程没有此分支，所以会新建</p>
<p>在远程主机<code>origin</code>上创建一个分支</p>
<pre><code class="language-sh">git push origin &lt;本地分支名&gt;
</code></pre>
<p>在远程主机<code>origin</code>上创建一个<code>MyBranch</code>的分支，并与本地的同名分支建立追踪关系。</p>
<pre><code class="language-sh">git push -u origin MyBranch
</code></pre>
<h2 id="3-删除分支">3、删除分支</h2>
<h3 id="删除本地分支">删除本地分支</h3>
<p>需要当前不在被删除的分支上</p>
<p><code>-d</code>参数用来删除一个分支，前提是该分支没有未合并的变动。</p>
<pre><code class="language-sh">git branch -d [branch-name]
</code></pre>
<p>强制删除一个分支，不管有没有未合并变化。</p>
<pre><code class="language-sh">git branch -D [branch-name]
</code></pre>
<h3 id="删除远程分支">删除远程分支</h3>
<pre><code class="language-sh">git push origin --delete [branch-name]
</code></pre>
<pre><code class="language-sh">git branch -dr origin/[remote-branch]
</code></pre>
<h2 id="4-分支改名">4、分支改名</h2>
<p>为当前分支改名</p>
<pre><code class="language-sh">git branch -m [branch-name]
</code></pre>
<p>为指定分支改名</p>
<pre><code class="language-sh">git branch -m dev develop
</code></pre>
<h2 id="5-关联远程分支">5、关联远程分支</h2>
<p>查看本地分支与远程分支的关联</p>
<pre><code class="language-sh">git branch -vv
</code></pre>
<p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<pre><code class="language-sh">git branch --set-upstream-to=origin/[remote-branch] [branch]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生活网站导航]]></title>
        <id>https://leecss.com/post/sheng-huo-wang-zhan-dao-hang/</id>
        <link href="https://leecss.com/post/sheng-huo-wang-zhan-dao-hang/">
        </link>
        <updated>2021-06-16T13:56:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="其他">其他</h2>
<p><a href="http://www.tiqianhuandai.cc/">房贷计算</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-简介]]></title>
        <id>https://leecss.com/post/git-jian-jie/</id>
        <link href="https://leecss.com/post/git-jian-jie/">
        </link>
        <updated>2021-06-15T23:29:57.000Z</updated>
        <content type="html"><![CDATA[<p>git是目前世界上最先进的 <strong>分布式</strong>  <strong>版本控制</strong>系统。</p>
<h2 id="特点">特点</h2>
<p>1、直接记录快照，而非差异比较</p>
<p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p>
<p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1623799889637.png" alt="" loading="lazy"></figure>
<p>2、分布式</p>
<blockquote>
<p>集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p>
</blockquote>
<blockquote>
<p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库,安全性要更高。</p>
</blockquote>
<h2 id="状态">状态</h2>
<ul>
<li>
<p>Workspace：工作区</p>
</li>
<li>
<p>Index / Stage：暂存区</p>
</li>
<li>
<p>Repository：仓库区（或本地仓库）</p>
</li>
<li>
<p>Remote：远程仓库</p>
<figure data-type="image" tabindex="2"><img src="https://leecss.com/post-images/1623800678351.png" alt="" loading="lazy"></figure>
</li>
</ul>
<p>查看文件的状态</p>
<pre><code class="language-shell">git status
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端教程导航]]></title>
        <id>https://leecss.com/post/qian-duan-jiao-cheng-dao-hang/</id>
        <link href="https://leecss.com/post/qian-duan-jiao-cheng-dao-hang/">
        </link>
        <updated>2021-06-15T23:08:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="git">git</h2>
<p>1、<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></p>
<p>2、<a href="https://www.bookstack.cn/read/git-tutorial/README.md">https://www.bookstack.cn/read/git-tutorial/README.md</a></p>
<p>​      <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p>
<p>​      <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<p>3、<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<p>4、<a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html">https://marklodato.github.io/visual-git-guide/index-zh-cn.html</a></p>
<p>5、<a href="https://git-scm.com/book/zh/v2">https://git-scm.com/book/zh/v2</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-语义化版本]]></title>
        <id>https://leecss.com/post/git-yu-yi-hua-ban-ben/</id>
        <link href="https://leecss.com/post/git-yu-yi-hua-ban-ben/">
        </link>
        <updated>2021-06-15T14:41:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="版本格式">版本格式</h2>
<ul>
<li><code>0.y.z</code> 表示开发阶段，一切可能随时改变，非稳定版。</li>
<li><code>1.0.0</code> 界定此版本为初始稳定版，后面的一切更新都基于此版本进行修改。</li>
</ul>
<blockquote>
<p>版本格式：主版本号.次版本号.修订号<br>
版本示例：1.2.3</p>
</blockquote>
<h2 id="版本号递增规则">版本号递增规则</h2>
<blockquote>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
</ol>
</blockquote>
<h2 id="先行版本号和开发版本号">先行版本号和开发版本号</h2>
<p>先行版本号(Pre-release)：意味该版本不稳定，可能存在兼容性问题。</p>
<p>格式为: <code>X.Y.Z.[a-c][正整数]</code>，如 1.0.0.a1，1.0.0.b99，1.0.0.c1000。</p>
<p>开发版本号：常用于 CI-CD（持续集成和持续交付）</p>
<p>格式为:  <code>X.Y.Z-dev[正整数]</code>，如 1.0.1-dev4</p>
<h2 id="版本名称">版本名称</h2>
<h3 id="常见">常见</h3>
<table>
<thead>
<tr>
<th>描述方式</th>
<th>说明</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>α</code>或<code>a</code></td>
<td>alpha 版</td>
<td>内测版本，内部测试的版本，bug 较多</td>
</tr>
<tr>
<td><code>β</code>或<code>b</code></td>
<td>beta 版</td>
<td>公测版本，给外部进行测试的版本，有缺陷</td>
</tr>
<tr>
<td><code>γ</code>或<code>g</code></td>
<td>Gamma 版</td>
<td>相当成熟的测试版，于发行版相差无几</td>
</tr>
<tr>
<td><code>rc</code></td>
<td>Release Candidate</td>
<td>是前面三种测试版的进一步版本，实现了全部功能，清除了大部分 bug，接近发布倒计时，有时会进一步细分为 rc1,rc2</td>
</tr>
</tbody>
</table>
<h3 id="其他">其他</h3>
<table>
<thead>
<tr>
<th>描述方式</th>
<th>说明</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Demo</code></td>
<td>演示版</td>
<td>只集成了正式版部分功能，无法升级</td>
</tr>
<tr>
<td><code>SP</code></td>
<td>SP1</td>
<td>是 service pack 的意思表示升级包</td>
</tr>
<tr>
<td><code>Trial</code></td>
<td>试用版</td>
<td>试用版</td>
</tr>
<tr>
<td><code>Unregistered</code></td>
<td>未注册</td>
<td>有功能或时间限制的版本</td>
</tr>
<tr>
<td><code>Lite</code></td>
<td>精简版</td>
<td>只含有正式版核心功能</td>
</tr>
<tr>
<td><code>enhance</code></td>
<td>增强版</td>
<td>属于正式版1</td>
</tr>
<tr>
<td><code>free</code></td>
<td>免费版</td>
<td>自由使用版本</td>
</tr>
<tr>
<td><code>release</code></td>
<td>发行版</td>
<td>有时间限制</td>
</tr>
<tr>
<td><code>upgrade</code></td>
<td>升级版</td>
<td>有功能增强或修复 bug</td>
</tr>
<tr>
<td><code>Retail</code></td>
<td>零售版</td>
<td>单独发售</td>
</tr>
<tr>
<td><code>Cardware</code></td>
<td>共享版</td>
<td>公用许可证</td>
</tr>
</tbody>
</table>
<h2 id="版本限定">版本限定</h2>
<p>在进行包管理时,为了保证安装依赖的兼容性.</p>
<pre><code class="language-json">{
  &quot;devDependencies&quot;: {
    &quot;karma&quot;: &quot;0.13.22&quot;
  }
}
</code></pre>
<p>表示安装 <code>0.13.22</code> 版本的 karma.</p>
<h3 id="范围描述">范围描述</h3>
<ul>
<li><code>&lt;</code> 小于某一版本号</li>
<li><code>&lt;=</code> 小于等于某一版本号</li>
<li><code>&gt;</code> 大于某一版本号</li>
<li><code>&gt;=</code> 大于等于某一版本号</li>
<li><code>=</code> 等于某一版本号,没有意义和直接写该版本号一样</li>
<li><code>~</code> 基于版本号描述的最新补丁版本</li>
<li><code>^</code> 基于版本号描述的最新兼容版本</li>
<li><code>-</code> 某个范围</li>
</ul>
<p>严格来讲对 <code>~,^</code> 的表述需要结合具体的包管理工具和版本号规则来确定.但是对于一般使用记住如下原则.<br>
<strong><code>^</code> 是确保版本兼容性时,默认对次版本号的限定约束</strong><br>
<strong><code>~</code> 是确保版本兼容性时,默认对补丁号的约束</strong></p>
<blockquote>
<p>利用 <code>^,~</code> 的意义在于确保工具包对依赖版本的兼容性,排除主版本更迭,<br>
造成依赖失效的可能.</p>
</blockquote>
<h3 id="版本描述">版本描述</h3>
<ul>
<li><code>*</code> 通配符</li>
<li><code>x,X</code> 约等于 <code>*</code> 号,通常用于次版本和补丁的通配.</li>
</ul>
<blockquote>
<p><code>0.x</code> 警惕这种版本,说明该依赖还未稳定(<strong>如果它遵守语义化命名的话</strong>),此外由于 <code>0.x</code> 版本随时可能改变,此时 <code>^,~</code> 的都表示为对补丁版的限制.</p>
</blockquote>
<pre><code class="language-sh">&lt; 1.2.3     小于1.2.3 的版本均可 
= 1.2.3     只支持等于1.2.3 的版本 
&lt;= 1.2.3    只支持小于等于1.2.3 的版本
&gt; 1.2.3     只支持大于 1.2.3 的版本
&gt;= 1.2.3    只支持大于等于 1.2.3 的版本
1.2.3-2     支持 &gt;=1.2.3 &lt;3.0.0 的版本
1.x.1       支持 &gt;=1.0.1 &lt;1.1.0 的版本
*           支持 &gt;= 0.0.0 的版本
&quot;&quot;          同 *
1           表示 &gt;=1.0.0 &lt;2.0.0 其余任意位置为空相似
1.0         &gt;= 1.0.0 &lt; 1.1.0
~1.1.1      &gt;=1.1.1 &lt;1.2.0
~1.1        &gt;=1.1.0 &lt;1.2.0
~1          &gt;=1.0.0 &lt;2.0.0
^1.1.1      &gt;=1.1.1 &lt;2.0.0
^0.1.1      &gt;=0.1.1 &lt;0.2.0 注意这里,不要以为是 0.1.1-1.0.0 之间
^0.0.1      &gt;=0.0.1 &lt;0.0.2 同上,请注意
</code></pre>
<h3 id="主要版本">主要版本</h3>
<ul>
<li>指定版本：比如 <code>1.2.2</code> ，遵循“大版本.次要版本.小版本”的格式规定，安装时只安装指定版本。</li>
<li>波浪号（<code>tilde</code>）+指定版本：比如 <code>~1.2.2</code> ，表示安装 <code>1.2.x</code> 的最新版本（不低于<code>1.2.2</code>），但是不安装 <code>1.3.x</code>，也就是说安装时不改变大版本号和次要版本号。</li>
<li>插入号（<code>caret</code>）+指定版本：比如 <code>ˆ1.2.2</code>，表示安装 <code>1.x.x</code> 的最新版本（不低于 <code>1.2.2</code>），但是不安装 <code>2.x.x</code>，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为 0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</li>
<li>latest：安装最新版本。</li>
</ul>
<h2 id="文档">文档</h2>
<p>https://semver.org/lang/zh-CN/</p>
<p>https://getcomposer.org/doc/articles/versions.md</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome插件]]></title>
        <id>https://leecss.com/post/google-cha-jian/</id>
        <link href="https://leecss.com/post/google-cha-jian/">
        </link>
        <updated>2021-06-15T00:16:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-bluesea">1、BlueSea</h2>
<p>GitHub 链接：https://github.com/jiangqizheng/BlueSea 。</p>
<p>介绍：帮助翻译及记忆英语单词</p>
<h3 id="安装">安装</h3>
<p>1、下载或者克隆代码到本地</p>
<pre><code class="language-sh">git clone https://github.com/jiangqizheng/BlueSea
</code></pre>
<p>2.打开 Chrome 浏览器，在地址栏中输入chrome://extensions/，打开开发者模式，并选择加载已解压的扩展程序，选择 Bluesea 的代码文件夹。</p>
<h2 id="2-awesome-screenshot">2、Awesome Screenshot</h2>
<p>下载：谷歌商店搜索安装</p>
<p>介绍：截图工具</p>
<p>快捷键：</p>
<blockquote>
<p>可视区域： Ctrl + Shift + V</p>
<p>选择区域:    Ctrl + Shift + S</p>
<p>整个页面： Ctrl + Shift + E</p>
</blockquote>
<h2 id="3-adblock-plus">3、Adblock Plus</h2>
<p>下载：谷歌商店搜索安装</p>
<p>介绍：广告拦截</p>
<h2 id="4-momentum">4、Momentum</h2>
<p>下载：谷歌商店搜索安装</p>
<p>介绍：浏览器背景图片及小工具</p>
]]></content>
    </entry>
</feed>