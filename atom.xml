<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leecss.com</id>
    <title>当下</title>
    <updated>2021-07-03T13:22:04.634Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leecss.com"/>
    <link rel="self" href="https://leecss.com/atom.xml"/>
    <logo>https://leecss.com/images/avatar.png</logo>
    <icon>https://leecss.com/favicon.ico</icon>
    <rights>All rights reserved 2021, 当下</rights>
    <entry>
        <title type="html"><![CDATA[git-blame]]></title>
        <id>https://leecss.com/post/git-blame/</id>
        <link href="https://leecss.com/post/git-blame/">
        </link>
        <updated>2021-07-03T13:07:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>从blame这个词就能大致知道这个命令的作用了</p>
<p><code>git blame</code> 命令可以查看每行代码的提交详情，包括提交人、时间等信息</p>
<p>当你发现某一行写的有问题时，你就可以查看是谁最后改的这里</p>
<h2 id="命令">命令</h2>
<p>显示指定文件的历史修改记录</p>
<pre><code class="language-sh">git blame &lt;filename&gt;
</code></pre>
<h3 id="查看具体的行或范围">查看具体的行或范围</h3>
<p><code>-L</code>看某一行或某个范围行</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L &lt;start&gt;[,&lt;end&gt;]
</code></pre>
<p>查看第 10 行</p>
<pre><code>git blame &lt;filename&gt; -L 10,10
</code></pre>
<p>查看第 10 行及以后</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L 10
</code></pre>
<p>查看第 10 到 20 行</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L 10,20
</code></pre>
<p>查看 10 行以后 5 行的数据</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L 10,+5
</code></pre>
<p>查看 10 行以前 5 行的数据</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L 10,-5
</code></pre>
<h3 id="查看某个函数">查看某个函数</h3>
<p>通过函数名来查看一个区域块的代码，只能识别文件最外层的方法名和类名</p>
<pre><code class="language-sh">git blame &lt;filename&gt; -L:&lt;func_name&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-bisect]]></title>
        <id>https://leecss.com/post/git-bisect/</id>
        <link href="https://leecss.com/post/git-bisect/">
        </link>
        <updated>2021-07-03T11:15:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>用来查找哪一次代码提交引入了错误。</p>
<p>它的原理很简单，就是将代码提交的历史，按照两分法不断缩小定位。所谓&quot;两分法&quot;，就是将代码历史一分为二，确定问题出在前半部分，还是后半部分，不断执行这个过程，直到范围缩小到某一次代码提交。</p>
<figure data-type="image" tabindex="1"><img src="https://leecss.com/post-images/1625311032096.png" alt="" loading="lazy"></figure>
<h2 id="命令">命令</h2>
<h3 id="启动查错">启动查错</h3>
<p>&quot;终点&quot;是最近的提交，&quot;起点&quot;是更久以前的提交。它们之间的这段历史，就是差错的范围。</p>
<p>我们可以将起点置为第一次，也可以置为我们知道的具体某个commit</p>
<p>现在，我们选择全部的代码历史。起点是第一次提交<code>4d83cf</code>，终点是最近一次的<code>HEAD</code>。</p>
<pre><code class="language-sh">git bisect start [终点] [起点]
git bisect start HEAD 4d83cf
</code></pre>
<p>执行上面的命令以后，代码库就会切换到这段范围正当中的那一次提交</p>
<p>假如这个库一共有101次提交。那么就会切换到第51次提交。</p>
<h3 id="标识正确">标识正确</h3>
<p>现在刷新浏览器，发现功能正常。使用<code>git bisect good</code>命令，标识本次提交（第51次）没有问题。</p>
<pre><code class="language-sh">git bisect good
</code></pre>
<p>既然第51次提交没有问题，就意味着错误是在代码历史的后半段引入的。执行上面的命令，Git 就自动切换到后半段的中点（第76次提交）。</p>
<h3 id="标志错误">标志错误</h3>
<p>现在刷新浏览器,发现功能不正常。使用<code>git bisect bad</code>命令，标识本次提交（第76）有问题。</p>
<pre><code class="language-sh">git bisect bad
</code></pre>
<p>执行上面的命令以后，Git 就自动切换到第51次到第76次的中点（第63次提交）。</p>
<p>接下来，不断重复这个过程，直到成功找到出问题的那一次提交为止。这时，Git 会给出如下的提示。</p>
<pre><code class="language-sh">b47892 is the first bad commit
</code></pre>
<p>既然找到那个有问题的提交，就可以<a href="https://github.com/bradleyboy/bisectercise/commit/b47892adec22ee3b0330aff37cbc5e695dfb99d6">检查代码</a>，确定具体是什么错误。</p>
<h3 id="退出查错">退出查错</h3>
<p>然后，使用<code>git bisect reset</code>命令，退出查错，回到最近一次的代码提交。</p>
<pre><code class="language-sh">git bisect reset
</code></pre>
<p>现在就可以开始修复错误了。</p>
<h2 id="转载">转载</h2>
<blockquote>
<p>阮一峰</p>
<p><a href="http://www.ruanyifeng.com/blog/2018/12/git-bisect.html">http://www.ruanyifeng.com/blog/2018/12/git-bisect.html</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-gitignore]]></title>
        <id>https://leecss.com/post/git-gitignore/</id>
        <link href="https://leecss.com/post/git-gitignore/">
        </link>
        <updated>2021-07-03T10:02:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>一些工作区中的文件不需要提交到远程，所以需要让git忽略他们，不对其进行检测，方法就是创建.gitignore文件</p>
<h2 id="忽略规则">忽略规则</h2>
<h3 id="语法">语法</h3>
<p>以斜杠<code>/</code>开头表示目录；<br>
以星号<code>*</code>通配多个字符；<br>
以问号<code>?</code>通配单个字符<br>
以方括号<code>[]</code>包含单个字符的匹配列表；<br>
以叹号<code>!</code>表示不忽略(跟踪)匹配到的文件或目录；</p>
<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>
<h3 id="示例">示例</h3>
<p><strong>忽略</strong></p>
<pre><code class="language-sh"># 忽略根目录下的public下的所有目录及文件
/public/*

# 忽略所有目录名为public下的所有目录及文件
public/*

# 忽略具体的文件
/public/index.html

# 忽略所有的.zip文件
*.zip

# 忽略 a.zip b.zip
[ab].zip
</code></pre>
<p><strong>保留</strong></p>
<pre><code class="language-sh"># 不过滤该文件夹
!src/
</code></pre>
<h2 id="问题">问题</h2>
<h3 id="忽略规则不生效">忽略规则不生效</h3>
<p>原因是当前文件已经被加入到git仓库中</p>
<pre><code class="language-sh">git rm -r --cached .
git add .
git commit -m 'update .gitignore'
</code></pre>
<h2 id="网站">网站</h2>
<p><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p>
<p><a href="https://www.toptal.com/developers/gitignore">gitignore.io</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-配置ssh-key]]></title>
        <id>https://leecss.com/post/git-pei-zhi-ssh-key/</id>
        <link href="https://leecss.com/post/git-pei-zhi-ssh-key/">
        </link>
        <updated>2021-07-03T07:54:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>ssh可以基于密码进行认证，也可以基于密钥去认证用户，基于密钥认证时可以实现免密码登录的效果。</p>
<p>SSH公钥默认存储在账户的主目录下的<code>~/.ssh</code>目录</p>
<p><code>ssh-keygen</code>生成私钥id_rsa以及对应的公钥</p>
<p><code>-t</code>选项表示指定密钥的类型(The type of the key to generate)</p>
<p>​	即指定算法，版本2的ssh协议可以指定的密钥类型有 “dsa”, “ecdsa”, “ed25519”, “rsa”</p>
<p><code>-C</code> 选项表示用于识别这个密钥的注释 (comment to identify the key )</p>
<p><code>-f</code>选项表示直接指定密钥生成位置以及密钥的名称，默认id_rsa（私钥id_rsa，公钥id_rsa.pub）</p>
<h2 id="单个">单个</h2>
<p>1、生成密钥对</p>
<pre><code class="language-sh">ssh-keygen -t rsa -C &quot;your-email@email.com&quot;
</code></pre>
<p>2、查看公钥并复制</p>
<pre><code class="language-sh">cat ~/.ssh/id_rsa.pub
</code></pre>
<p>3、登录账户并添加ssh key</p>
<h2 id="多个">多个</h2>
<p>1、生成密钥对</p>
<p>GitHub</p>
<pre><code class="language-sh">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C 'email'
</code></pre>
<p>company</p>
<pre><code class="language-sh">ssh-keygen -t rsa -f ~/.ssh/id_rsa.company -C &quot;email&quot;
</code></pre>
<p>此时，<code>~/.ssh</code>目录下应该有4个文件：<code>id_rsa.company</code>文件和<code>id_rsa.company.pub</code>文件，还有<code>id_rsa.github</code>文件和<code>id_rsa.github.pub</code>文件。</p>
<p>2、查看公钥并添加到github和gitlab</p>
<pre><code>cat ~/.ssh/id_rsa.pub
</code></pre>
<p>3、新增并配置config文件</p>
<pre><code class="language-sh">touch ~/.ssh/config
</code></pre>
<p>参数说明：</p>
<p><code>Host</code>：定义<strong>Host</strong>的名字,（建议与HostName一致）</p>
<p><code>HostName</code>：这个是真实的域名地址，要登录主机的主机名。</p>
<p><code>Port</code>：端口号（如果不是默认22端口，则需要指定端口号）</p>
<p><code>User</code>：配置登录名，例如：GitHub的username。</p>
<p><code>IdentityFile</code>：指定私钥文件的路径，也就是<code>id_rsa</code>文件的绝对路径。</p>
<p><code>PreferredAuthentications</code>：配置登录时用什么权限认证，可设为<code>publickey,password publickey,keyboard-interactive等</code>。</p>
<p>内容格式如下：</p>
<pre><code class="language-sh">Host 域名或者IP
User test
IdentityFile ~/.ssh/id_rsa.company
PreferredAuthentications publickey
</code></pre>
<p>举例：</p>
<pre><code class="language-sh">// github
Host github.com
HostName github.com
User lee
IdentityFile /Users/lee/.ssh/id_rsa.github
PreferredAuthentications publickey

// company
Host company
HostName 192.168.1.222
User lee
IdentityFile ~/.ssh/id_rsa.company
PreferredAuthentications publickey
</code></pre>
<pre><code class="language-sh">git clone git@company:lee/test.git
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-stash]]></title>
        <id>https://leecss.com/post/git-stash/</id>
        <link href="https://leecss.com/post/git-stash/">
        </link>
        <updated>2021-07-02T00:44:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git stash</code>命令用于暂时保存没有提交的工作。运行该命令后，所有没有commit的代码，都会暂时从工作区移除，回到上次commit时的状态。</p>
<h2 id="命令">命令</h2>
<h3 id="新增暂存">新增暂存</h3>
<p>暂时保存没有提交的工作</p>
<pre><code class="language-sh">git stash
</code></pre>
<h3 id="查看暂存">查看暂存</h3>
<p>查看暂存列表</p>
<pre><code class="language-sh">git stash list
---
stash@{0}: WIP on workbranch: 56cd5d4 Revert &quot;update old files&quot;
stash@{1}: WIP on project1: 1dd87ea commit &quot;fix typos and grammar&quot;
</code></pre>
<p>展示目前存在的stash</p>
<pre><code class="language-sh">git stash show -p
</code></pre>
<h3 id="恢复暂存">恢复暂存</h3>
<h4 id="需手动删除">需手动删除</h4>
<p>恢复stash 列表的第一条stash 的内容，即最近的一次暂存,不会自动删除取出的修改</p>
<pre><code>git stash apply stash@{0}
</code></pre>
<p>取出指定某一次的修改,不会自动删除取出的修改</p>
<pre><code class="language-sh">git stash apply stash@{[number]}
git stash apply stash@{1}
</code></pre>
<hr>
<h4 id="自动删除">自动删除</h4>
<p>恢复stash 列表的第一条stash 的内容并自动删除</p>
<pre><code class="language-sh">git stash pop stash@{0}
</code></pre>
<p>取出最近一次的修改并自动删除，作用同上，书写更简便</p>
<pre><code class="language-sh">git stash pop
</code></pre>
<h3 id="删除暂存">删除暂存</h3>
<p>删除stash 列表的第一条stash 的内容</p>
<pre><code class="language-sh">git stash drop stash@{0}
</code></pre>
<p>清空stash 列表</p>
<pre><code class="language-sh">git stash clear
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-remote]]></title>
        <id>https://leecss.com/post/git-remote/</id>
        <link href="https://leecss.com/post/git-remote/">
        </link>
        <updated>2021-07-02T00:18:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>此命令用于管理远程主机(仓库)</p>
<h2 id="命令">命令</h2>
<h3 id="查看">查看</h3>
<p>列出所有远程主机</p>
<pre><code class="language-sh">git remote
---
origin
</code></pre>
<p>查看远程主机的网址</p>
<pre><code class="language-sh">git remote -v
---
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
</code></pre>
<p>查看该主机的详细信息</p>
<pre><code class="language-sh">git remote show &lt;主机名&gt;
</code></pre>
<h3 id="添加">添加</h3>
<p>添加远程主机</p>
<pre><code>git remote add &lt;主机名&gt; &lt;网址&gt;
</code></pre>
<h3 id="删除">删除</h3>
<p>删除远程主机</p>
<pre><code class="language-sh">git remote rm &lt;主机名&gt;
</code></pre>
<h3 id="更改名称">更改名称</h3>
<p>更改远程主机的名称</p>
<pre><code class="language-sh">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;
</code></pre>
<p>克隆时指定名称</p>
<pre><code class="language-sh">git clone -o &lt;主机名&gt; &lt;网址&gt;
git clone -o jQuery https://github.com/jquery/jquery.git

git remote
---
jQuery
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-mv]]></title>
        <id>https://leecss.com/post/git-mv/</id>
        <link href="https://leecss.com/post/git-mv/">
        </link>
        <updated>2021-07-01T14:44:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>平时我们会遇到重命名文件的情况，git会把重命名的操作理解为以下几步</p>
<p>1、先删除了原文件</p>
<p>2、添加了新文件</p>
<p>3、将变更添加到暂存区</p>
<p>以上几步可以使用git命令直接完成</p>
<pre><code class="language-sh">git mv [old-name] [new-name]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-rm]]></title>
        <id>https://leecss.com/post/git-rm/</id>
        <link href="https://leecss.com/post/git-rm/">
        </link>
        <updated>2021-07-01T14:34:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>平时我们都会有删除文件的需求，正常操作为</p>
<p>1、在文件系统中删除某文件</p>
<p>2、在git中将删除文件的变更添加到暂存区。</p>
<p>上述两步操作可以通过一条命令来完成，即</p>
<pre><code class="language-sh">git rm [file]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-rev-parse]]></title>
        <id>https://leecss.com/post/git-rev-parse/</id>
        <link href="https://leecss.com/post/git-rev-parse/">
        </link>
        <updated>2021-06-30T15:48:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p>显示某个指示符的SHA1哈希值。</p>
<h2 id="命令">命令</h2>
<p>通过提交名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse HEAD
</code></pre>
<p>通过哈希码的缩写获取到完整的哈希码</p>
<pre><code class="language-sh">git rev-parse a63d5b
</code></pre>
<p>通过分支名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse master
</code></pre>
<p>通过标签名获取到对应提交的哈希码</p>
<pre><code class="language-sh">git rev-parse v1.0.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-diff]]></title>
        <id>https://leecss.com/post/git-diff/</id>
        <link href="https://leecss.com/post/git-diff/">
        </link>
        <updated>2021-06-30T15:37:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="概述">概述</h2>
<p><code>git diff</code>命令用于查看文件之间的差异。</p>
<h2 id="命令">命令</h2>
<h3 id="工作区与暂存区">工作区与暂存区</h3>
<p>查看工作区与暂存区的差异</p>
<pre><code class="language-sh">git diff
</code></pre>
<p>查看工作区与暂存区某个文件的差异</p>
<pre><code class="language-sh">git diff [file]
git diff file.txt
// 或
git diff -- [file]
git diff -- ./[file]
</code></pre>
<p>查看工作区与暂存区多个文件的差异，以空格分隔</p>
<pre><code class="language-sh">git diff -- [file1] [file2]
</code></pre>
<p>查看工作区与暂存区目录下所有文件的差异</p>
<pre><code class="language-sh">git diff -- [dir]/
</code></pre>
<h3 id="工作区与commit快照">工作区与commit快照</h3>
<p>查看工作区与上一次commit之间的差异</p>
<pre><code class="language-sh">git diff HEAD
</code></pre>
<p>查看工作区与某个 commit 的差异</p>
<pre><code class="language-sh">git diff [commit]
</code></pre>
<hr>
<p>当我们修改工作区的内容后，我们没有暂存，也没有提交，所以此时暂存区和仓库的状态是相同的。</p>
<p>即此时<code>git diff</code> 与<code>git diff HEAD</code>返回的结果是完全相同的</p>
<hr>
<p>当我们执行<code>git add</code>命令后，此时<code>git diff</code>不会显示任何内容，因为此时工作区与暂存区没有差异。</p>
<p>但是如果执行<code>git diff HEAD</code>命令，仍然可以查看到工作区和提交之间的差异。</p>
<hr>
<p>假如此时再次修改工作区的内容，我们就能同时对比工作区和(暂存区/仓库)的差异</p>
<p>并且此时暂存区和仓库也是有差异的</p>
<h3 id="暂存区与仓库区">暂存区与仓库区</h3>
<p>查看暂存区与当前 commit 的差异</p>
<pre><code class="language-sh">git diff --cached
</code></pre>
<h3 id="对比两次提交">对比两次提交</h3>
<p>显示两次提交之间的差异</p>
<pre><code class="language-sh">git diff [first-commit] [second-commit]
</code></pre>
<p>我们也可以使用引用，更加方便的对比，比如：最新提交和上一次提交</p>
<pre><code class="language-sh">git diff HEAD HEAD~
</code></pre>
<h3 id="对比两个分支">对比两个分支</h3>
<p>即对比两个分支上最新提交之间的差异</p>
<pre><code class="language-sh">git diff [first-branch] [second-branch]
git diff master dev
// 等效于
git diff [first-branch]..[second-branch]
git diff maste..dev
</code></pre>
<p>查看自从topic分支建立以后，master分支发生的变化</p>
<pre><code class="language-sh">git diff topic...master
</code></pre>
]]></content>
    </entry>
</feed>